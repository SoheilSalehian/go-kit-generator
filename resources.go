// Code generated by go-bindata.
// sources:
// transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _transportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x5f\x4f\xdb\x3e\x14\x7d\x8e\x3f\xc5\xfd\xe5\xe1\x27\x1b\x81\xf3\xce\xc4\x03\x5b\xb3\x09\x09\x15\x04\x95\xf6\x4a\x96\xba\x21\x2b\xb1\x33\xc7\xe9\x9f\x55\xf9\xee\xbb\x76\xec\x2e\x81\x14\x09\xcd\x52\xd5\xfa\xfa\xdc\x3f\xe7\x1c\xbb\x49\x02\x67\x1f\x59\x04\x13\xbe\xa5\xf3\xf4\xe1\x7a\x91\xce\xe0\xeb\xcd\x6d\x0a\x17\x17\x30\xbb\x83\xf9\xdd\x02\xd2\xd9\xcd\x02\xee\x6f\xd3\xeb\xc7\xd4\xe2\xee\x33\x9d\x55\xc2\x08\x5d\xfe\x16\x4b\xd8\x96\xe6\xf9\x12\xc3\xf6\x24\x95\xcb\x5a\x95\xd2\xcc\xf1\x1c\xae\xe0\x70\x00\x3e\x0a\x75\x9d\x45\x3d\x88\x5f\xad\x68\x86\xa0\x61\x64\x84\x59\xec\xeb\x57\x18\x17\x09\x98\xa6\x56\xb2\x11\xa3\x42\x83\xd0\x18\x35\x2a\x35\x08\xf5\xa8\x8f\x89\x45\xea\x2c\x5f\x67\x85\x80\x2a\x2b\x25\x21\x65\x55\x2b\x6d\x80\x92\x28\x16\x32\x57\xcb\x52\x16\xc9\xcf\x46\xc9\x18\x03\x52\x98\xe4\xd9\x98\x3a\x26\xb8\x29\x50\xab\xf6\x07\xcf\x55\x95\x14\xea\x62\x5d\x9a\xc4\x7e\x84\x97\xc8\xc2\x0b\xf5\x92\xc9\x82\x2b\x5d\x24\xbb\xc4\xe6\xe6\x4a\x1a\xb1\xc3\x33\x46\x06\xba\x10\x63\x47\x9f\xd0\xd7\x9f\x43\x63\x74\x9b\x1b\x38\x10\x98\x10\x78\x42\x4f\x78\xb2\x03\x5f\xc6\x6f\xc1\xf1\x13\xe9\xc8\x50\xc8\x77\x7a\xf7\x80\xb7\xcd\x47\xa6\x4c\x59\x30\x6e\x3f\x82\x63\xff\x28\xd5\x1a\x70\x61\x5d\x94\x16\x06\xcb\xa7\x09\xad\xcf\x55\x55\x1a\x51\xd5\x66\x7f\x1c\x38\x8c\x47\x1b\x46\x56\xad\xcc\xd1\xad\xb5\x98\x98\xfb\x2f\x6e\x93\x4f\xf1\x7a\x14\x7a\x53\xe6\x82\x41\x30\xea\x08\x40\x8a\x91\x16\xa6\xd5\x12\x6c\x03\x9a\x9b\x1d\x78\xc3\xf8\x97\xfe\xfb\x1c\xb4\xb7\x04\xf1\x42\xaf\xb2\x5c\x1c\x3a\x06\x74\xb0\x3b\x07\x9c\x5f\x69\xe6\x04\x43\x34\x5c\x5e\x85\x24\x4e\x4f\x7b\xcc\x10\xad\x5a\x53\xb7\xc6\x15\xb0\x59\x48\x80\x4f\x24\x50\xac\xc6\x5f\x39\xdb\x75\x8c\x44\x51\xb9\x72\xa9\xff\x5d\x81\x2c\x5f\x5c\x7f\xbb\x3c\xa5\x77\x2c\x3e\x4c\x19\xeb\xc6\xe0\xa9\xe5\x42\x19\xe0\x16\x6b\x62\x8f\x8e\xfc\x53\xcd\x38\x3e\x96\xea\xbc\xb1\x33\x81\x8f\x4c\x1c\xdf\x82\xf3\x76\xe9\x62\xa7\xd5\xa2\x1a\xce\xec\x3b\x0c\x1a\x9c\xb4\x60\x93\xe9\xa3\x65\xa7\xcb\x91\x20\x1d\xaa\x6e\xef\x20\x9f\x8b\x6d\x3f\x96\xa6\x9a\x7f\x56\xcb\x3d\xe3\xfd\x9e\xfe\xef\xab\xb1\x4f\x63\xad\xa3\x70\x75\x70\xeb\xfa\x5b\x82\x21\xe6\x73\x7a\xe2\xe1\x3a\x7b\xd6\xfe\x19\x3a\xda\xee\xff\x46\x84\x18\xdd\x82\xe7\xd8\xef\xbf\x6b\x7c\x13\xda\x5e\x41\xff\x32\x47\x77\xd0\x51\x1e\x5c\xe1\xc0\xa3\x6f\xa4\xe9\x96\xf1\xfe\x27\x0d\xf9\xcc\x8e\xf2\x27\x00\x00\xff\xff\x52\xff\x2e\xd3\x5b\x06\x00\x00")

func transportTmplBytes() ([]byte, error) {
	return bindataRead(
		_transportTmpl,
		"transport.tmpl",
	)
}

func transportTmpl() (*asset, error) {
	bytes, err := transportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transport.tmpl", size: 1627, mode: os.FileMode(420), modTime: time.Unix(1460043982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"transport.tmpl": transportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"transport.tmpl": &bintree{transportTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

