// Code generated by go-bindata.
// sources:
// transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _transportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\xf3\x61\x90\x86\x46\xbe\x77\xe8\xa1\x5b\xbc\x21\x40\x91\x0c\x6d\x80\x5d\xeb\x39\x8c\xeb\xa5\x96\x3c\x59\xce\x07\x02\xff\xf7\x51\xb2\x9c\xa6\x85\xd3\x1a\x08\x12\xd2\xfc\x78\x8f\x8f\x4c\x92\xc0\xcf\x74\x9e\xde\xdf\x2e\xd3\x29\xfc\x98\xdd\xa5\x30\x99\xc0\x74\x01\xf3\xc5\x12\xd2\xe9\x6c\x09\xbf\xee\xd2\xdb\x87\x94\xd5\x59\xbe\xc9\x0a\x84\x2a\x2b\x15\x63\x65\x55\x6b\x63\x81\xb3\x28\x46\x95\xeb\x55\xa9\x8a\xe4\x6f\xa3\x55\x4c\x0e\x85\x36\x79\xb2\xb6\x8e\x19\x19\x45\x69\x9f\xda\x3f\x32\xd7\x55\x52\xe8\xc9\xa6\xb4\x89\xfb\xa0\x5a\xd5\xba\x54\xd6\x85\x17\xfa\x39\x53\x85\xd4\xa6\x48\xf6\x89\xcb\xcd\xb5\xb2\xb8\xa7\x77\x82\x31\x42\x77\x8f\xff\x5a\x6c\x2c\xb3\x87\x1a\xe1\x78\x04\x99\x86\xe4\x79\x56\x21\x74\x5d\x78\x0f\x8d\x35\x6d\x6e\xe1\xc8\x5c\x4c\x70\xce\x54\xdd\x5a\x8a\xf1\x79\xde\x58\xba\x2a\xe4\x78\x74\x68\xaf\xe3\x91\xd8\xf8\x91\x75\xa1\x71\x53\x6b\xd5\xe0\x3b\x9d\xfb\x80\x97\xd6\x00\x7d\xc1\xde\xbf\x68\xed\x59\xfb\xde\x1a\xed\xff\x26\x9c\x10\x44\xa9\x31\x40\x0f\x55\xa6\xd1\xc2\xd9\x13\x12\xd1\x98\x2b\x5d\x95\x16\xab\xda\x1e\x4e\x90\x07\x80\xbc\x11\x6c\xdd\xaa\x9c\xd4\xda\xe0\x08\xf2\x97\xb8\x6d\x3e\xc6\xec\x01\xcd\xb6\xcc\x51\xc0\x20\xd4\x29\x80\x48\x46\x06\x6d\x6b\x14\xb8\x06\x3c\xb7\x7b\x08\x82\xc9\xef\xfd\xf7\x15\x98\x20\x09\xc5\xa3\x59\x67\x39\x1e\x3b\x01\xfc\xcc\xba\x02\xc2\xaf\x8d\xf0\x23\xa3\x68\xb8\xbe\x19\x92\x24\xbf\xac\xb1\xa0\x68\xed\xa7\xe4\x0b\xb8\x2c\x22\x20\x47\x12\x38\x55\x93\x6f\xc5\xed\x3a\xc1\xa2\xa8\x5c\xfb\xdc\x4f\x37\xa0\xca\x67\x0f\xc0\x41\xf0\x8c\xde\xd1\xf8\x38\xae\xac\xc7\x21\x53\x47\x86\x0b\x20\x93\x6a\x52\x8f\xee\x83\xaa\xf0\x61\xd9\x38\x3e\x55\xeb\x82\xb8\x53\xa4\x43\xc3\xd3\x3d\x78\x7d\x57\xde\x77\x79\x62\xdc\xc0\x17\x77\x8b\xc3\x1c\x2e\xca\xb0\xcd\xcc\x49\xb6\xcb\xe5\xd8\x30\x3d\x9a\xbc\xdb\x43\x39\xc7\x5d\x0f\xcb\x70\x23\xbf\xe9\xd5\x41\xc8\xde\xe6\x9f\x43\x35\xf1\xf5\xf5\xb8\xa3\x61\x7d\xc8\xf4\xfd\x1d\xc1\xc1\x17\x72\x7a\xe2\xc3\x4a\x07\xd6\xe1\x18\x3d\x6d\xff\x9f\x83\x83\x8f\xef\x20\x70\xec\xed\xdf\x86\xee\xc2\xb8\x35\x0c\xf7\xf9\x6a\x0f\x3d\xe5\xb3\x35\x1e\x78\xf4\x8d\x0c\xdf\x09\xd9\xff\xe4\x43\xbe\x70\x50\xfe\x07\x00\x00\xff\xff\x26\x73\xe7\x9d\x28\x05\x00\x00")

func transportTmplBytes() ([]byte, error) {
	return bindataRead(
		_transportTmpl,
		"transport.tmpl",
	)
}

func transportTmpl() (*asset, error) {
	bytes, err := transportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transport.tmpl", size: 1320, mode: os.FileMode(420), modTime: time.Unix(1460041562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"transport.tmpl": transportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"transport.tmpl": &bintree{transportTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

