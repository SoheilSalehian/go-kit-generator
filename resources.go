// Code generated by go-bindata.
// sources:
// transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _transportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5f\x4f\xdb\x3e\x14\x7d\x8e\x3f\xc5\xfd\xe5\xe1\x27\x1b\x81\xf3\xce\xc4\x03\x5b\xb3\x09\x09\x15\x04\x95\xf6\x4a\x96\x9a\x90\x95\xd8\x99\xe3\xf4\xcf\xaa\x7c\xf7\x5d\x3b\x76\x97\x40\xda\x09\x4b\x55\xeb\xeb\x73\xff\x9c\x73\xec\x26\x09\x9c\x7d\x64\x11\x4c\xf8\x96\xce\xd3\x87\xeb\x45\x3a\x83\xaf\x37\xb7\x29\x5c\x5c\xc0\xec\x0e\xe6\x77\x0b\x48\x67\x37\x0b\xb8\xbf\x4d\xaf\x1f\x53\x8b\xbb\xcf\x74\x56\x09\x23\x74\xf9\x5b\x2c\x61\x53\x9a\x97\x4b\x0c\xdb\x93\x54\x2e\x6b\x55\x4a\x33\xc7\x73\xb8\x82\xfd\x1e\xf8\x28\xd4\x75\x16\xf5\x20\x7e\xb5\xa2\x19\x82\x86\x91\x11\x66\xb1\xab\xdf\x60\x5c\x24\x60\x9a\x5a\xc9\x46\x8c\x0a\x0d\x42\x63\xd4\xa8\xd4\x20\xd4\xa3\x3e\x26\x56\x9d\xe5\xab\xac\x10\x50\x65\xa5\x24\xa4\xac\x6a\xa5\x0d\x50\x12\xc5\x42\xe6\x6a\x59\xca\x22\xf9\xd9\x28\x19\x63\x40\x0a\x93\xbc\x18\x53\xc7\x04\x37\x05\x4a\xd5\xfe\xe0\xb9\xaa\x92\x42\x5d\xac\x4a\x93\xd8\x8f\xf0\x0a\x59\x78\xa1\x5e\x33\x59\x70\xa5\x8b\x64\x9b\xd8\xdc\x5c\x49\x23\xb6\x78\xc6\xc8\x40\x16\x62\xec\xe4\x13\xf2\xfa\x73\x68\x8c\x6e\x73\x03\x7b\x02\x13\xfa\x4e\xc8\x09\x4f\x76\xe0\xcb\xf8\x3d\x38\x7e\x22\x1d\x19\xea\x78\xa2\x77\x0f\x78\xdf\x7c\xe4\xc9\x94\x03\xe3\xf6\x23\x38\xf6\x8f\x52\xad\x01\x17\xd6\x45\x69\x61\xb0\x7c\x9a\xd0\xfa\x5c\x55\xa5\x11\x55\x6d\x76\x87\x81\xc3\x78\xb4\x61\xe4\xb9\x95\x39\xba\xb5\x12\x13\x73\xff\xc5\xad\xf3\x29\x5e\x8f\x42\xaf\xcb\x5c\x30\x08\x46\x1d\x00\x48\x31\xd2\xc2\xb4\x5a\x82\x6d\x40\x73\xb3\x05\x6f\x18\xff\xd2\x7f\x9f\x83\xf6\x96\x20\x5e\xe8\xe7\x2c\x17\xfb\x8e\x01\x1d\xec\xce\x01\xe7\x57\x9a\x39\xc1\x10\x0d\x97\x57\x21\x89\xd3\xe3\x1e\x33\x44\xab\xd6\xd4\xad\x71\x05\x6c\x16\x12\xe0\x13\x09\x14\xab\xf1\x37\xce\x76\x1d\x23\x51\x54\x3e\xbb\xd4\xff\xae\x40\x96\xaf\xae\xbf\x5d\x9e\xd2\x09\x8b\xf7\x53\xc6\xba\x31\x78\x6a\xb9\x50\x06\xb8\xc5\x9a\xd8\xa3\x23\xa7\x6b\xc2\x3f\x8a\xc6\xf1\xa1\x56\xe7\x9d\x9d\x09\x7c\x65\xe2\xf0\x18\x9c\xb9\x4b\x17\x3b\x2e\x17\xd5\x70\x66\x1f\x62\x10\xe1\xa8\x07\xeb\x4c\x1f\x3c\x3b\x5e\x8e\x04\xed\x50\x76\x7b\x09\xf9\x5c\x6c\xfa\xb1\x34\xd5\xfc\xb3\x5a\xee\x18\xef\xf7\xf4\x7f\x5f\x8d\x7d\x1a\x8b\x1d\x85\xbb\x83\x5b\xd7\xdf\x12\x0c\x31\x9f\xd3\x13\x0f\xf7\xd9\xb3\xf6\xef\xd0\xd1\x76\x7f\x38\x22\xc4\xe8\x06\x3c\xc7\x7e\xff\x5d\xe3\xa3\xd0\xf6\x0e\xfa\xa7\x39\xba\x84\x8e\xf2\xe0\x0e\x07\x1e\x7d\x23\x4d\x37\x8c\xf7\x3f\x69\xc8\x67\x76\x94\x3f\x01\x00\x00\xff\xff\x83\xcd\xec\x14\x5b\x06\x00\x00")

func transportTmplBytes() ([]byte, error) {
	return bindataRead(
		_transportTmpl,
		"transport.tmpl",
	)
}

func transportTmpl() (*asset, error) {
	bytes, err := transportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transport.tmpl", size: 1627, mode: os.FileMode(420), modTime: time.Unix(1460042374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"transport.tmpl": transportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"transport.tmpl": &bintree{transportTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

