// ****************************************************************
// GENERATED FILE -- DO NOT EDIT Unless Response type is not native
// @ {{ timestamp }}
// Parameterized with:
//
// EndpointName = {{ .EndpointName }}
// RequestName = {{ .RequestName }}
// RequestType = {{ .RequestType }}
// ResponseName = {{ .ResponseName }}
// ResponseType = {{ .ResponseType }}
// ****************************************************************

package main

import (
	"time"
  {{ if .RequestType | s3type }} 
  "github.com/OwnLocal/PipeDream/aws"
  {{ else }}
  {{ end }}

	"github.com/go-kit/kit/log"
)

type loggingMiddleware struct {
	logger log.Logger
  {{ .EndpointName }}Service
}


// Logging decoupled from the service logic
func (mw loggingMiddleware) Call{{ .EndpointName }}({{ .RequestName }} {{ .RequestType }}) (output {{ .ResponseType }}, err error) {
  defer func(begin time.Time) {
    _ = mw.logger.Log(
    "method", "Call{{ .EndpointName }}",
    "input", {{ .RequestName }},
    // NOTE: Ensure type "{{ .ResponseType }}" is printable here
    "output", output,
    "err", err,
    "took", time.Since(begin),
    )
  }(time.Now())

  output, err = mw.{{ .EndpointName }}Service.Call{{ .EndpointName }}({{ .RequestName }})
  if err != nil {
  {{ if .ResponseType | nativetype }} 
    return "", err
  {{ else }}
    return {{ .ResponseType }} {}, err
  {{ end }}
  }

  return output, nil
}



