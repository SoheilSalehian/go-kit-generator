// *******************************************************
// PARTIALLY GENERATED FILE -- Edit the indicated sections
// @ {{ timestamp }}
// Parameterized with:
//
// EndpointName = {{ .EndpointName }}
// RequestName = {{ .RequestName }}
// RequestType = {{ .RequestType }}
// ResponseName = {{ .ResponseName }}
// ResponseType = {{ .ResponseType }}
// ********************************************************

package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os/exec"

	"github.com/OwnLocal/PipeDream/pipaws"
	"github.com/prometheus/common/log"
)

type {{ .EndpointName }}Service interface {
Call{{ .EndpointName }} ({{ .RequestType }}) ({{ .ResponseType }}, error)
}

type service struct{}

{{ if .RequestType | nativetype }} 
{{ else if .RequestType | s3type }} 
{{ else }}
// Define the service input struct if not native type
type {{ .RequestType }} struct {

// Add in the json struct elements that the service will use as part of the request.
// 
//

}
{{ end }}

{{ if .ResponseType | nativetype }} 
{{ else if .ResponseType | s3type }} 
{{ else }}
// Define the service output struct if not native type
type {{ .ResponseType }} struct {

// Add in the json struct elements that the service will return back in its response.
// 
//

}
{{ end }}

func (service) Call{{ .EndpointName }}(input {{ .RequestType }}) ({{ .ResponseType }}, error) {
{{ if .PipelineService }}
  
  // Download the input file 
	err := aws.Download(input)
	if err != nil {
		log.Error(err)
		return "", err
	}

  	output := aws.S3Type{Bucket: input.Bucket, FileName: fmt.Sprintf("%s.PNG", input.FileName), ContentType: ""}

{{ else }}
{{ if .ResponseType | nativetype }} 
  output := ""
{{ end }}
{{ end }}
// Add in the main logic of the service
// For instance:
// cmd := fmt.Sprintf("pdftoppm -png %s > %s", input.FileName, output.FileName)
// if exec.Command("sh", "-c", cmd).Run(); err != nil {
//   log.Error(err)
//	 return "", err
// }

{{ if .PipelineService }}
  // Read the downloaded file on disk
  bytes, err := ioutil.ReadFile(input.FileName)
	if err != nil {
		log.Error(err)
		return "", err
	}

  // Detect the content type
	output.ContentType = http.DetectContentType(bytes)

  // Upload to S3
	if aws.Upload(output, bytes); err != nil {
		log.Error(err)
		return "", err
	}

  return output.FullPath(), nil

{{ else }}
	return output, nil
{{ end }}
}

