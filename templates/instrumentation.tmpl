// ***********************************************************************
// GENERATED FILE -- DO NOT EDIT Unless custom instrumentation is required
// @ {{ timestamp }}
// Parameterized with:
//
// EndpointName = {{ .EndpointName }}
// RequestName = {{ .RequestName }}
// RequestType = {{ .RequestType }}
// ResponseName = {{ .ResponseName }}
// ResponseType = {{ .ResponseType }}
// ***********************************************************************

package main

import (
	"fmt"
	"time"
  {{ if .RequestType | s3type }} 
  "github.com/OwnLocal/PipeDream/aws"
  {{ else }}
  {{ end }}

	"github.com/go-kit/kit/metrics"
)

type instrumentationMiddleware struct {
	requestCount   metrics.Counter
	requestLatency metrics.TimeHistogram
  // Add custom instrumentation 
  //
  //
  {{ .EndpointName }}Service
}

func (mw instrumentationMiddleware) Call{{ .EndpointName }}({{ .RequestName }} {{ .RequestType }}) (output {{ .ResponseType}}, err error) {
	defer func(begin time.Time) {
  methodField := metrics.Field{Key: "method", Value: "Call{{ .EndpointName }}"}
		errorField := metrics.Field{Key: "err", Value: fmt.Sprintf("%v", err)}
		mw.requestCount.With(methodField).With(errorField).Add(1)
		mw.requestLatency.With(methodField).With(errorField).Observe(time.Since(begin))
    // Add in observation calls for the custom instrumentation
    //
    //
	}(time.Now())

  output, err = mw.{{ .EndpointName }}Service.Call{{ .EndpointName }}({{ .RequestName }})
	if err != nil {
  {{ if .ResponseType | nativetype }} 
    return "", err
  {{ else }}
    return {{ .ResponseType }} {}, err
  {{ end }}
	}

	return output, nil
}

