// Code generated by go-bindata.
// sources:
// templates/Dockerfile.tmpl
// templates/instrumentation.tmpl
// templates/logging.tmpl
// templates/service.tmpl
// templates/srv-main.tmpl
// templates/transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDockerfileTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xd0\x22\x02\x70\x01\xd5\xb9\xbb\xfa\xb9\x06\x39\x86\xb8\xba\x28\xb8\x79\xfa\xb8\x2a\xe8\xea\x2a\xb8\xa6\x64\x96\x28\x24\x16\x2b\xe4\xa5\x26\xa7\x16\x17\x27\x16\x55\x72\x11\x6b\x9c\x5b\x90\xbf\xaf\x42\x72\x6a\x5e\x49\x69\x51\x65\x4e\x66\x5e\xb6\x7e\x72\xa2\x6e\x72\x6a\x51\x49\xb1\x02\x57\xb8\x7f\x90\xb7\x8b\x67\x90\x82\x3e\x97\xa3\x8b\x8b\x42\x6e\x62\x66\x1e\x90\xe9\xec\xeb\xa2\x10\xad\xa4\x0f\xe2\x29\xc5\x72\x01\x02\x00\x00\xff\xff\xed\x85\xf2\xcc\xb5\x00\x00\x00")

func templatesDockerfileTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfileTmpl,
		"templates/Dockerfile.tmpl",
	)
}

func templatesDockerfileTmpl() (*asset, error) {
	bytes, err := templatesDockerfileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile.tmpl", size: 181, mode: os.FileMode(420), modTime: time.Unix(1472673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInstrumentationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x51\x6f\x9b\x3c\x14\x7d\xc6\xbf\xe2\x7e\x48\x9f\x04\x53\x4b\xb4\xd7\x4a\x7d\xa8\x5a\xba\x55\xeb\xd2\xa9\xc9\xb6\x67\x02\x97\xc4\x2a\xd8\xcc\x36\x41\x59\xc6\x7f\xdf\xb5\x9d\xa4\xd0\x26\x53\x1f\x1a\x89\x90\x1c\x9f\x7b\x7c\x39\xe7\x9a\xc9\x04\x3e\xbc\xcf\x87\x91\xd4\xa7\x74\x9a\x3e\x5e\xcd\xd3\x1b\xb8\xbd\xbb\x4f\xe1\xfc\x1c\x6e\x1e\x60\xfa\x30\x87\xf4\xe6\x6e\x0e\xdf\x45\x85\x5a\x43\xde\x6a\x23\x6b\xe0\x42\x1b\xd5\xd6\x28\x4c\x66\xb8\x14\xc0\x35\x28\xfc\xd5\x72\x85\x85\x95\xfa\x96\xa9\xac\x46\x83\x8a\xff\xc6\x02\x3a\x6e\x56\x17\x04\xdb\x95\x54\x14\x8d\xe4\xc2\x4c\x69\x1d\x2e\x61\xbb\x85\x64\x04\xf5\xbd\x65\x3d\x92\x16\xea\x21\x69\x88\x8c\x38\xf3\x4d\xf3\x82\xe3\x90\x3d\x47\x37\x52\x68\x1c\x09\x0d\xa0\x31\x6b\x24\x35\x80\x3c\xeb\xbd\x9c\x66\x4d\x96\x3f\x65\x4b\x84\x3a\xe3\x82\x31\x5e\x37\x52\x19\x88\x58\x10\x96\xb5\x09\xe9\x66\x78\x8d\x21\xa3\x1f\x4b\xf2\xad\x5d\x24\xb9\xac\x27\x4b\x79\xfe\xc4\xcd\xc4\x5e\xe4\xab\xe2\xb9\x0e\x59\xcc\x98\xb1\xed\xbd\xc8\xe2\x2b\x2f\x8a\x0a\xbb\x4c\x21\x58\x3c\x37\xb0\x65\x81\xf2\xd6\x5c\xcb\x56\x18\x00\xd8\x69\x24\xee\x3f\xaa\xc3\xfa\x7d\x66\x50\xe4\x9b\xc3\xfa\x9c\x5a\xf9\xcc\x29\xf1\x25\xe5\xc9\x00\xc8\x86\xab\xa2\x38\x35\x04\x8e\xb0\xff\x3a\x92\xec\x0c\xd5\x9a\xe7\xc8\x7a\xc6\xca\x56\xe4\x10\xd5\xdd\xe9\xe6\xe3\x63\x0a\xd1\xeb\x51\x38\x92\x7c\x0c\x91\x6c\x4d\xd3\x9a\x57\x51\xf6\xfd\x19\xa0\x52\xf6\x92\x2a\xb6\xc6\x14\x58\xa2\x02\xdb\x4e\xb4\xc0\x25\x17\x60\xdd\x77\xcf\x6d\x97\x9d\x53\x2b\x59\xdc\x72\xac\x0a\xb8\xb8\x3c\x18\xe3\x80\xed\x17\xdc\x5c\x40\xe8\x29\xe1\x19\xfc\xc8\xaa\x16\x09\x38\xd2\x78\xd8\xb3\x20\x70\xbb\xfe\x53\x8a\x18\xcf\x3a\x34\x0e\xc9\xac\x51\x24\x52\x46\xe1\xff\xeb\xd0\xb5\x1e\x5b\xa1\xba\x4b\x86\x81\x26\x3f\x69\x50\xa2\x41\xa7\xb1\x47\x9e\xf7\x8b\x13\x8a\x2d\xfa\x18\x8f\x6a\x77\x61\xbf\xa5\xfa\x61\xa1\x29\x3b\x8c\x9c\x39\x33\x2e\x72\xf4\x6e\xc5\x31\x59\x74\x18\x0b\x72\x4f\x3a\xa2\x1f\x87\x3c\xab\x2a\x0d\xa5\x54\x60\x56\x78\x62\x66\x76\xe5\xfb\x5b\xd0\xfb\x2d\xa6\xb2\x8b\x48\x9b\x60\x1f\xa4\x4f\x8d\x3c\xeb\x92\xd3\x73\x95\x5c\xd3\x86\x6f\x1b\x1a\x32\x82\x97\x4e\xf3\xbf\x4b\x10\xbc\x72\x51\x13\x8d\xc0\xf1\xd1\xff\x03\x82\xfa\x5c\xa3\xf1\x93\x05\xae\x51\x85\xa6\x55\x02\x42\x9f\x88\xaf\xc4\x4a\xbb\x17\xc5\x60\xfd\xc8\x7b\x04\xb6\xfd\xb0\x46\x14\xb6\x24\xa0\xf3\x10\xec\x6a\xf6\x8f\x4b\x3d\xd9\x63\xf2\x37\x00\x00\xff\xff\x85\x02\xa3\x8a\xe1\x05\x00\x00")

func templatesInstrumentationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInstrumentationTmpl,
		"templates/instrumentation.tmpl",
	)
}

func templatesInstrumentationTmpl() (*asset, error) {
	bytes, err := templatesInstrumentationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/instrumentation.tmpl", size: 1505, mode: os.FileMode(420), modTime: time.Unix(1472673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoggingTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x41\x8f\x9b\x3c\x10\x3d\xaf\x7f\xc5\x7c\x3e\xc1\xa7\x84\xdc\x57\xda\x43\xd5\xd0\x6a\xa5\x34\x5b\x65\xe9\xb9\x22\x30\x21\x56\xc0\xa6\xc6\x5e\xd4\xa6\xfc\xf7\x8e\x6d\x22\x81\x42\xa5\x4a\x8b\x04\x32\x33\xcf\x33\xef\xbd\xb1\x37\x1b\xf8\xff\x9d\x0f\xa3\x1a\x9f\xd3\x7d\x7a\xf8\x90\xa5\x5b\xf8\xf4\xbc\x4b\x61\xbd\x86\xed\x0b\xec\x5f\x32\x48\xb7\xcf\x19\x7c\x93\x35\x76\x1d\x1c\xb0\x6b\x95\xec\x10\xcc\xcf\x16\x41\x74\x20\x95\x01\x99\x1b\xf1\x86\xae\xc6\xd7\x5c\xe7\x0d\x1a\xd4\xe2\x17\x96\xd0\x0b\x73\x7e\xa4\xb0\xcb\xa4\xb2\x6c\x95\x90\x66\x4f\x79\x78\x82\xeb\x15\x92\x59\x68\x18\x1c\xea\x80\x3f\x2c\x76\x53\xd0\x34\x32\xc3\x64\x8e\xc0\x0c\xe3\x23\x37\x4c\xa0\x39\x2b\x34\x09\xcd\x51\xb3\x52\x93\x50\x40\xbd\xdb\x5b\xd6\xe6\xc5\x25\xaf\x10\x9a\x5c\x48\xc6\x44\xd3\x2a\x6d\x20\x62\x0f\xdc\x88\x06\x39\xa3\x45\x45\x4e\xd9\x63\x52\xa8\x66\x53\xa9\xf5\x45\x98\x8d\x7b\x6b\x55\x71\x16\x33\xe6\xbd\xa6\x9f\x4a\xc8\xea\x8b\x28\xcb\x1a\xfb\x5c\x23\x74\x46\xdb\xc2\xc0\x95\x3d\xb8\x1c\x6a\x07\x49\x76\x7e\xc9\x60\xc9\xe1\x57\xd4\x6f\xa2\x40\x36\x30\xe6\x84\xed\x42\x45\x28\xb1\x50\xb6\xad\x69\x60\x27\xad\x1a\x30\x67\x2a\x1d\x90\xae\xa2\x28\xd8\xc9\xca\x02\xa2\xa6\xbf\xe7\x10\x2f\xb5\x89\xee\xe7\xb6\x30\xa6\x18\x22\x65\x4d\x6b\xcd\x92\xef\x2b\x40\xad\xdd\xab\x34\xb5\x20\x35\x25\x9e\x48\xa0\x23\x12\x1d\x91\x38\x80\xb3\x2e\xc9\xe8\x13\xf2\x00\xdf\x69\x82\x4d\x9f\x04\x2b\x9c\x0d\x91\x0f\x73\x3a\x8e\x67\x55\xf2\x15\xf0\x05\xaa\x7c\x15\x40\x42\x12\x11\xc2\xdc\x33\x0f\x00\x72\x8b\x6e\x42\xfa\x48\xc7\xb8\xb3\x7a\x3c\xfd\x7c\x81\x38\x77\x77\xa2\xd5\xd4\x21\x3f\xd6\x08\x67\xd4\x18\x3a\x04\xad\xd4\x22\x2c\xc6\xbe\xa4\x90\x7b\xad\xe3\xbf\x51\xea\x42\x01\x2f\xee\x55\xc8\x02\x83\xda\x38\xa4\x63\xfa\x0e\x91\x4f\xee\x55\x1f\xc5\x74\x34\xe0\x56\xcf\x1b\xe6\x1d\xf8\xfb\xe0\x93\x8f\x79\x5d\xff\xdb\xc0\x5c\x2b\x71\xf2\x45\xff\x7b\x02\x29\x6a\xef\x32\xe1\x28\x38\xd7\xfc\x7b\xbc\xfe\x26\x18\x00\x9e\xa9\x46\x63\xb5\x04\x1e\xc4\x85\x9d\x58\x77\xfe\x4a\x4d\xf2\x0b\x06\xc2\x75\x98\xee\x91\x65\xd8\x32\x38\xa9\xe3\xae\x9b\x62\x62\xe5\x8f\x32\xfb\x13\x00\x00\xff\xff\xba\x34\xf8\xfa\x01\x05\x00\x00")

func templatesLoggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoggingTmpl,
		"templates/logging.tmpl",
	)
}

func templatesLoggingTmpl() (*asset, error) {
	bytes, err := templatesLoggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logging.tmpl", size: 1281, mode: os.FileMode(420), modTime: time.Unix(1472673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x4f\x8f\xd3\x30\x10\xc5\xcf\xf8\x53\x8c\xf6\xd4\xae\xf6\xcf\x7d\xa5\x3d\x44\x6c\x40\x95\xaa\x0a\x95\x5e\x38\x9a\x64\xd2\x0e\xb8\x76\xb0\x27\xad\x20\xf4\xbb\x33\xce\x1f\x88\x4b\x91\xd8\xf6\x54\xbd\x79\x9e\x79\xf3\xb3\xf3\xf8\x08\xb7\xd7\xfd\x94\x1c\xfd\x90\xad\x37\x8b\x6c\xb9\xfc\x04\xef\xf3\x55\xbe\xce\x36\xf9\x0b\xbc\x5b\x2c\x73\xb8\xbf\x87\xbc\x24\x06\xde\x21\x90\x2d\xa9\xd0\x8c\x25\x04\x2c\x98\x9c\x0d\xdd\x51\xed\xf5\x1e\x19\x3d\xfd\x90\xca\x91\x78\xf7\x24\x72\xac\xe4\xb6\xac\x1d\x59\x5e\x49\x1d\x9e\xa1\x6d\xe1\x21\x91\x4e\xa7\xe8\x5a\xe3\xb7\x06\xc3\xd4\x34\x55\x12\xcf\xe6\x7b\x7d\xe6\xe9\x94\xd1\x13\x6a\x89\x84\x49\xa3\x89\x94\xba\x92\x56\x13\xa9\x77\x5d\x49\xf2\x56\xa9\x5a\x17\x5f\xf5\x16\x61\xaf\xc9\x2a\xc5\xb1\xe5\x85\xbd\x3f\xa2\x3f\x50\x11\x89\x0a\xb7\x4a\xcb\xbf\x56\xbd\xd5\xc6\x5c\xb0\xc2\xec\xef\x75\xe7\xa3\x98\x04\xbf\x03\xf4\xde\xf9\xb9\x3a\x0d\x83\xc3\x30\x25\xb0\x6f\x0a\x6e\x45\x96\xd5\x5e\xb0\x22\x8b\xdd\x7d\x8e\x75\xd7\x70\xdd\xf0\x60\x03\xaa\xc0\x3a\x06\xab\x99\x0e\xe2\x93\x46\x4a\x86\x89\x9a\xce\xfb\x39\x38\xb8\x1f\x0e\x2a\xba\xd0\x84\x0e\xe1\xef\xbd\xcf\x22\x8e\x33\xda\x2e\x4a\x56\x96\x42\xa0\x8b\xf2\x25\x38\x3b\x16\xd1\xe0\x1e\x2d\x07\x29\x68\x4e\x82\x1e\xc9\x18\xf0\xc8\x8d\xb7\xf0\x59\x40\xc7\xd3\x24\x46\x3f\x4c\x79\x88\x5d\xe3\xe3\x13\x04\x31\x8d\x2d\x63\x18\x55\x35\xb6\x80\xd9\xd0\x64\x0e\xff\x00\x3d\x23\x1b\x29\xbc\x96\x76\xdc\xe5\xbf\xf8\xc0\xc8\xf9\xe9\x19\x6e\x6e\x12\x5c\x49\xed\x12\xb6\x78\x77\x7f\x16\x4a\xd1\xc5\x97\x06\xc6\x6d\xa9\x00\x57\x4d\x71\xf5\x5f\xa1\x52\x6f\x06\x62\xfd\x88\x3b\xb0\x64\x84\xcf\xaf\x00\x00\x00\xff\xff\xa0\x57\xe6\x68\x30\x04\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 1072, mode: os.FileMode(420), modTime: time.Unix(1472673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSrvMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\xef\x6b\xf3\x36\x10\xfe\x1c\xff\x15\x87\x61\xe0\x8c\xd4\xfe\x1e\xe8\x87\x6c\xcd\xda\xb2\xbc\x69\x49\xfc\x32\xc6\xcb\x4b\x51\x2d\xc5\x11\xb5\x25\x4f\x92\xd3\x66\x59\xfe\xf7\xdd\x29\x76\x6b\xe7\xc7\x60\x50\xde\x42\x1d\xf9\xee\xd1\xe9\xb9\xe7\x4e\xe7\x24\x81\x9f\x3f\xe3\x2f\xc0\x40\x8f\x93\x45\x7a\x3f\x99\xcd\xfe\x84\xdb\xe9\x7c\xba\x98\xa4\xd3\x1b\xf8\xed\x7e\x36\x85\xab\x2b\xb8\x79\x80\xf9\x43\x0a\xd3\x9b\xfb\x14\x6a\x55\x08\x6b\x21\xab\xad\xd3\x25\x48\x65\x9d\xa9\x4b\xa1\x1c\x73\x52\x2b\x1f\x88\x19\x56\x0a\x27\x8c\xfc\x5b\x70\x78\x95\x6e\x3d\x46\x33\x79\xa6\x8a\x57\x5a\x2a\x37\x47\x3f\x5c\xc3\x6e\x07\x71\xcf\xb4\xdf\x13\x6a\x21\xfe\xaa\x85\xed\x82\xba\x96\x1e\x26\xdd\x56\x47\x18\x6f\x69\x31\xb6\xd2\xca\x8a\x5e\xa0\x8e\xa9\x8f\xea\x85\xea\x98\x0e\xa8\xcf\x51\x39\xa8\x58\xf6\xc2\x72\x01\x25\x93\x2a\x08\x64\x59\x69\xe3\x20\x0a\x06\xe1\xaa\x74\x21\xfe\x28\xe1\x92\xb5\x73\x15\xad\xb5\xa5\xa7\x93\xa5\x08\x03\x5c\xe4\xa8\x63\xfd\x1c\x67\xba\x4c\x72\x7d\xf5\x22\x5d\x42\xff\x85\xce\xc3\x8b\x4e\x2c\x82\x91\x19\x85\xc1\xb7\xca\x68\x7c\x5f\x8b\xda\xc2\x7f\xc3\x93\x0f\x24\xee\x24\x36\xce\x30\x65\x3d\xd5\x0b\x3b\xdf\x01\x2d\x79\xeb\xf8\x85\xf3\x3e\xcc\x49\x56\x48\x6c\x9b\xa7\x5c\x17\x4c\xe5\xfd\x53\xc3\x83\x31\xd6\x26\x4f\xde\x12\x52\x25\xd3\xca\x89\x37\x14\x69\x18\x04\xab\x5a\x65\x5e\xc2\x68\x08\xbb\x60\x90\xb9\x37\x18\x5f\x43\x83\x88\x7f\x41\x8d\x73\xa3\x6b\xc5\x23\xc4\x02\x60\xf5\x96\xc2\xd5\x15\xa0\x56\xb9\x54\x79\x30\xa0\x85\x30\xb4\x07\x57\xf1\x5c\xbc\xce\x74\x8e\x05\x98\x79\x73\xa4\x6d\xbc\x74\x5c\x18\xd3\xdf\x7d\xdc\xe8\x83\x95\x14\x05\xff\x5d\x6c\x2d\x05\xfa\xf6\x1d\xbd\x18\x7c\x17\x52\x12\x9a\x87\x23\x08\x31\x84\x36\xe1\x3e\x18\x98\x43\x6b\xfe\x8a\x9c\x1c\x81\x7b\xd5\xa0\xf3\xbd\x07\x8f\xee\xc9\x16\x37\xd6\x87\xca\xd9\x1d\x32\xa1\x9e\xb5\xd8\x40\x62\x0c\xe1\x99\x9b\x73\x8b\x29\x57\xe1\x28\x18\x0c\x96\xf5\xb3\xdd\x5a\x27\x4a\x04\x7e\x9b\x70\x0e\x5f\x64\x66\xb4\x15\x66\x23\x33\xe1\xc3\x7c\xf7\x38\x5a\x8d\xc1\xff\x85\x5d\x8a\xde\x79\x27\x8a\xaa\x75\xce\xeb\xf2\x19\xf5\xd2\x2b\x68\x60\x16\x17\x99\x14\x1b\xc1\x09\xbb\x1f\xc1\xbb\x16\xa8\x59\x9b\xee\x8c\x39\xa1\xb2\x2d\x25\xdc\x74\x16\xa5\x9a\x62\x3f\xdf\x49\x1c\x1d\x39\x0e\x89\x88\xba\x3b\x6e\xe8\x61\xfd\xf8\xe8\x54\x9b\x65\x5d\x96\xcc\x6c\x8f\xb4\x69\xac\x3f\x52\x9b\x26\x9f\x0e\x5b\x7b\xa2\x54\xaa\x1d\x2b\x80\xd7\xc6\xf7\x48\x4f\x31\xa9\xa0\xec\x6c\x8d\x4f\x94\x6b\xdb\x8d\x58\x9d\x1f\xae\xf8\x8e\xfd\xb0\xc2\x34\xad\x87\x1e\x1e\x87\x5d\x7f\x48\x23\x00\x2b\x62\xb6\x6e\x8d\x7d\x08\x28\x30\x49\x65\xd0\xbb\x61\x06\xec\x26\x3b\x37\x6e\x97\x87\xc4\xf1\xc2\xa2\xff\x1a\x1a\x1d\x76\xfb\xd6\xd0\x5c\x99\x2f\x92\xf3\x42\xbc\x32\x23\x76\x87\xbb\x33\xa2\x80\xfb\x0e\x61\x3c\xea\x12\x69\xa7\xbd\xf7\xc8\xfc\x11\xb2\x3d\xeb\x22\x60\xd7\x6d\xce\x11\xf4\xcb\xf1\xc1\x64\xcd\x14\x6e\x38\x93\x24\x75\x60\x6f\x8c\xf9\xb6\xc2\x54\xf1\xc6\x61\xfd\x70\x7c\x50\x19\x4b\xf6\x72\x6e\x73\xfb\x1a\xe1\x31\x43\xc2\x71\xac\x1f\x3f\x87\x6c\x3e\x40\x84\x41\x62\x88\x69\x3f\x23\x68\xf1\xb5\x25\x0e\xf1\x9d\x67\x19\x85\xc9\x49\x84\x7f\x50\xed\x57\x61\x32\x66\x29\x1a\x0e\x90\x8b\x09\x0d\x4f\x82\xb5\x93\x1e\xd5\xe8\x5d\x93\x03\xc0\x44\x43\xda\xf2\xd4\x14\x54\x98\x18\x47\x5d\x14\x96\x36\xa7\x31\x75\x97\xa6\x8f\xf4\xcb\x38\x37\xd7\xb8\xc0\xf9\x77\x8b\x5f\x6f\xb5\x89\xc2\xaf\x4f\x67\x58\xd6\x55\xf5\xce\xf2\xe9\xeb\x62\x16\x9e\x0d\x8e\xc3\x8f\x52\x20\x96\x33\xbc\xee\x42\x4d\x14\xf7\x9a\x47\x38\x69\xe3\x65\x85\xc3\xd2\xad\xa2\x70\xfc\x93\xfd\xbf\x47\x3e\x3e\x2c\x52\x3c\x73\x04\x4a\x16\xcd\x33\xc0\x06\xf8\x37\x00\x00\xff\xff\xbc\x83\x10\xad\x0b\x09\x00\x00")

func templatesSrvMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSrvMainTmpl,
		"templates/srv-main.tmpl",
	)
}

func templatesSrvMainTmpl() (*asset, error) {
	bytes, err := templatesSrvMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/srv-main.tmpl", size: 2315, mode: os.FileMode(420), modTime: time.Unix(1472673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x51\x6f\x9b\x30\x10\x7e\xc6\xbf\xe2\xc6\xc3\x04\x55\x03\x0f\x7b\xeb\x54\x69\x5d\xc3\xa6\x4a\x55\x5a\xb5\x91\xf6\xb8\x32\x72\x25\x5e\xc1\x66\xc6\x34\xed\x32\xfe\xfb\xce\xd8\x64\x90\x92\x4a\x9d\xa5\x28\xf6\xf9\xbb\xbb\xef\xee\x3b\x13\xc7\x70\xf4\x96\xc5\xc8\xe1\x6b\xb2\x48\x6e\xce\x96\xc9\x1c\xbe\x5c\x5c\x26\x30\x9b\xc1\xfc\x0a\x16\x57\x4b\x48\xe6\x17\x4b\xb8\xbe\x4c\xce\x6e\x13\x83\xfb\x04\xdb\x2d\x68\x5e\x62\xad\xd3\xb2\x82\xb6\x35\xc6\xeb\x54\xa5\x25\x6a\x54\xfc\x37\xae\x60\xc3\xf5\xfa\x84\xcc\xe6\x26\x11\xab\x4a\x72\xa1\x17\x74\x0f\xa7\xc6\x37\x1a\x99\xac\xff\x0d\xfe\x6a\x28\xe0\x00\x34\xb4\x8c\x30\xcb\xe7\x6a\x0f\xd3\x59\x7a\x4c\x5d\x49\x51\xe3\x28\xd0\xc0\x34\x46\x8d\x42\x0d\x4c\x16\xf5\xb6\x0e\xb2\x2a\xcd\x1e\xd2\x1c\xa1\x4c\xb9\x60\x8c\x97\x95\x54\x1a\x02\xe6\xf9\x28\x32\xb9\xe2\x22\x8f\x7f\xd6\x52\xf8\x64\x10\xa8\xe3\xb5\xd6\x95\xcf\x18\x98\xe4\xfc\x7e\x5c\xca\x1f\xa8\x3f\x68\xcb\x03\x08\x91\x6e\x6a\xf0\x73\x6a\x69\xf3\x23\xca\x64\x19\xd7\x72\x8d\xbc\xa8\xd3\x02\xd7\x3c\x15\x31\x5d\xcf\x72\xf9\xc0\xb5\xd9\xf9\x36\x22\x16\x75\x57\x85\x3d\x88\x95\xd9\x7b\xc3\x18\xb9\x9c\x19\x0f\xf3\x43\xa7\x86\x61\x96\xcb\x22\x15\x79\x24\x55\x1e\x3f\xc5\x86\x66\x26\x85\xc6\x27\xba\x0b\xd9\x40\x02\xd6\xb1\x9b\x90\xd2\xdd\x43\xad\x55\x93\x69\xd8\x5a\x02\x7b\x5a\x4e\x48\x07\x77\xa6\x37\x27\xfe\x4b\xb0\x7f\xc7\x5a\x36\xd4\xec\x95\xdc\x16\xf0\x32\xf9\x48\xff\x29\xb5\xc7\xe9\x47\x70\xca\xef\x25\x4a\x01\x2d\x8a\x4b\x2a\xc2\x60\x39\x37\x54\xea\x58\x96\x5c\x63\x59\xe9\xe7\x1d\xe1\x9e\x5e\x50\x87\xec\xbe\x11\x19\x0d\xc6\x03\x4e\xf0\xfe\x87\x7b\xcc\xa6\xea\xba\x45\xf5\xc8\x33\x0c\xa1\x17\x6a\x07\xa0\x12\x3d\x85\xba\x51\x02\x4c\x82\x20\xd3\x4f\xe0\x04\x8b\xce\xed\xff\x31\x28\x27\x09\xe1\x51\xdd\xa7\x19\x6e\xdb\x10\x82\xc1\xe9\x18\x88\xbf\x54\x61\xd7\x30\x42\xc3\xc9\x69\xef\x14\x05\x87\x35\x0e\x09\x5d\x5b\x6a\x57\x8d\xae\x1a\xdd\xc5\x31\xce\x54\x47\x74\x9e\x16\xc5\x84\x6f\x40\x81\xa3\x3d\x91\xdb\x36\x64\x9e\x47\x6f\xc0\xb8\xbf\x3b\x05\xc1\x8b\x8e\x8a\x59\xae\xba\x57\xd4\xde\x4e\x90\x88\x12\x53\x50\x10\x02\xd5\x46\xd1\x28\x7a\xcb\xfe\x33\x9a\xef\xef\x82\xb4\x4e\xd7\x39\xd2\x73\xc6\xdd\x53\xe8\xa4\x5d\x75\xb6\xc3\xcd\x0a\xbe\x4f\x08\x03\x47\xe6\x23\xd0\xb7\xe2\xa0\x28\x8f\xa9\xda\x89\x78\x38\x03\xeb\x3b\x48\x02\x98\xa9\x8c\x16\xb8\xb1\x4c\x55\xa0\xa2\xcf\x72\xf5\x1c\x46\xf6\x1c\xbc\x77\xd1\xc2\x8f\xe3\x96\x7b\xfd\x30\xd1\xb1\xcb\x6f\x6a\xee\x6d\xce\xc7\xf6\xa2\x1f\x70\xd7\x08\xf7\x30\xbb\x4e\x74\x1f\x3b\xec\x6d\x53\x75\x6f\xc0\x95\x6d\x21\xdf\x14\x3d\x1c\x65\xe6\xd4\x3d\xdf\xd1\xa0\x76\x5d\x18\xcc\x79\x5f\x9a\xcd\xad\x82\x4d\x18\xd9\x6d\xd0\xfb\x87\x86\xdd\xdf\x00\x00\x00\xff\xff\x01\x10\xc7\xa1\x00\x07\x00\x00")

func templatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTransportTmpl,
		"templates/transport.tmpl",
	)
}

func templatesTransportTmpl() (*asset, error) {
	bytes, err := templatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/transport.tmpl", size: 1792, mode: os.FileMode(420), modTime: time.Unix(1472673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Dockerfile.tmpl": templatesDockerfileTmpl,
	"templates/instrumentation.tmpl": templatesInstrumentationTmpl,
	"templates/logging.tmpl": templatesLoggingTmpl,
	"templates/service.tmpl": templatesServiceTmpl,
	"templates/srv-main.tmpl": templatesSrvMainTmpl,
	"templates/transport.tmpl": templatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Dockerfile.tmpl": &bintree{templatesDockerfileTmpl, map[string]*bintree{}},
		"instrumentation.tmpl": &bintree{templatesInstrumentationTmpl, map[string]*bintree{}},
		"logging.tmpl": &bintree{templatesLoggingTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
		"srv-main.tmpl": &bintree{templatesSrvMainTmpl, map[string]*bintree{}},
		"transport.tmpl": &bintree{templatesTransportTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

