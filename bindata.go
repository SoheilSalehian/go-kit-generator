// Code generated by go-bindata.
// sources:
// templates/Dockerfile.tmpl
// templates/gateway-service.tmpl
// templates/instrumentation.tmpl
// templates/logging.tmpl
// templates/service.tmpl
// templates/srv-main.tmpl
// templates/transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDockerfileTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xd0\x22\x02\x70\x01\xd5\xb9\xbb\xfa\xb9\x06\x39\x86\xb8\xba\x28\xb8\x79\xfa\xb8\x2a\xe8\xea\x2a\xb8\xa6\x64\x96\x28\x24\x16\x2b\xe4\xa5\x26\xa7\x16\x17\x27\x16\x55\x82\x94\x39\x28\x54\x57\x2b\x94\x64\xe6\xa6\x16\x97\x24\xe6\x16\x28\xd4\xd6\x72\x11\x6b\x87\x5b\x90\xbf\xaf\x42\x72\x6a\x5e\x49\x69\x51\x65\x4e\x66\x5e\xb6\x7e\x72\xa2\x6e\x72\x6a\x51\x49\xb1\x02\x57\xb8\x7f\x90\xb7\x8b\x67\x90\x82\x3e\x97\xa3\x8b\x8b\x42\x6e\x62\x66\x1e\x90\xe9\xec\xeb\xa2\x10\xad\xa4\x0f\xe2\x29\xc5\x72\x01\x02\x00\x00\xff\xff\x0b\x22\xaf\xa3\xca\x00\x00\x00")

func templatesDockerfileTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfileTmpl,
		"templates/Dockerfile.tmpl",
	)
}

func templatesDockerfileTmpl() (*asset, error) {
	bytes, err := templatesDockerfileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile.tmpl", size: 202, mode: os.FileMode(420), modTime: time.Unix(1460304884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGatewayServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x6d\x4f\xe4\x36\x10\xfe\xbc\xf9\x15\xd3\xa8\x3a\x25\x27\xc8\x7e\xe0\x1b\x15\x55\x79\x59\x28\x2a\x05\x04\xcb\x87\xea\x84\xee\xbc\x89\x77\x71\x2f\xb1\x83\xed\xb0\xe5\xf6\xf6\xbf\x77\xc6\x4e\xd2\x64\x5f\x28\xa0\x43\x42\xda\x8c\xe7\xe5\xf1\xf3\xcc\xd8\x1e\x0e\xe1\xe3\xfb\xfe\x02\x0c\xbd\x3e\xbc\x19\x9f\x1f\x5e\x5c\xfc\x05\x67\xa3\xcb\xd1\xcd\xe1\x78\x74\x02\xa7\xe7\x17\x23\xd8\xdd\x85\x51\x26\x2c\xd8\x07\x0e\x42\x66\x22\x65\x96\x67\x60\x78\x6a\x85\x92\x86\x42\x7f\x83\xc5\x02\xac\x28\xb8\xb1\xac\x28\x61\xb9\x74\xf9\x98\x66\x05\xb7\x5c\x8b\x6f\xe8\x3e\x17\xf6\x61\x1f\xcd\xb4\x32\x92\x59\xa9\x84\xb4\x97\xb8\x0e\x07\x14\x9b\xf4\x4c\x3e\xfe\x86\x3f\x56\x98\xb0\xe3\xd4\xb5\xf4\x7c\xc6\xcf\xe5\x8a\x8f\xb3\x34\x3e\xa6\x44\x9c\xbc\x97\xa8\x63\xea\x7b\xf5\x52\x75\x4c\xde\x8b\xfe\x6f\xb9\x7e\x12\x29\xbf\xd2\x19\xd7\xfb\xe4\xa8\x99\x9c\x71\xf8\xd9\x78\x3b\xec\x1f\x40\xd2\xf5\xc1\x50\xf2\x6a\xd7\xf1\x73\xf7\x57\xb2\x70\x99\xe1\x47\xe2\x92\xbe\x53\xb7\x8f\x41\x50\xb2\xf4\x2b\xc3\xfa\x05\x13\x32\x08\x44\x51\x2a\x6d\x21\x0a\x06\xe1\xe4\xd9\x72\x13\xe2\x0f\x2e\x53\x95\x09\x39\x1b\xfe\x6d\x94\x74\x06\xad\x95\x76\x4b\x42\x0d\x85\xaa\xac\xc8\xe9\x43\x72\x3b\x7c\xb0\xb6\xa4\xdf\x0a\x97\x03\x20\x94\x62\xda\x27\xf5\x3b\x98\x3d\xeb\x19\x01\xf4\x08\x67\x28\x6c\x35\x49\x52\x55\x0c\xaf\xe6\xf2\x42\xa5\x2c\x1f\x5e\x8b\x92\x9f\x68\xce\x8a\x21\x9b\x63\x22\x97\x87\xe7\xc6\xb1\x08\xff\x6d\x3d\xc0\x42\x9d\xf0\x52\x2b\xec\x97\x07\x5e\x99\x21\x7e\x16\x4a\x0e\x73\x35\x0b\x83\x38\x08\x5c\xbd\x0d\x6d\x52\xd3\x8c\x5d\x89\x6d\x36\x65\xf8\x6b\x11\x1c\xb3\x3c\xdf\xe0\x0a\xd1\x7a\x77\xc4\x8d\xb1\xa7\xf3\x0e\x38\x7e\xe2\x60\x59\x17\x6e\x84\x33\x56\x57\xa9\x5d\xa0\xf9\x55\xa2\xb7\xa8\x3b\xca\xd7\xf5\xeb\x54\x88\x76\x6d\x19\x90\xb1\xe4\x76\xcf\x61\xf9\x42\x82\xed\x87\x5d\x9f\xef\x90\xab\x39\xd7\x29\x33\x7c\xb9\xd4\xfc\x31\xfc\x82\x30\x3b\x84\x4e\x2b\x99\x42\x54\x7b\xc7\xb0\x85\x8c\x48\xc8\xb2\xb2\x9d\x52\xc8\x44\xc1\xca\x4f\x08\x0b\xfb\xe4\xbe\xa5\x73\xd1\x92\x81\x50\x51\xb9\x27\xa6\x01\xdb\x85\x62\x37\xbb\xd7\x3e\x66\xaf\x93\x9b\x02\x51\xc8\xd3\x9c\xcd\x88\xa6\xf0\xd3\x06\x40\xf7\xae\xdb\xb0\xd5\x1c\xb0\xe4\x54\xe4\xf5\xb8\xa2\x7f\x88\xb5\x07\x03\x84\x41\xd1\xbe\x75\x93\x4b\x3e\x8f\xc2\x33\x85\x5b\x90\xc0\x8b\xd2\x3e\xc3\x14\x43\x40\x52\x8c\x90\xee\xa4\x9a\xe1\x29\x35\x67\xcf\x49\x18\x63\x34\xd6\x4f\x46\x14\x1a\xd5\x48\xdc\xbe\x68\x45\x73\x5b\x69\x09\x52\xe4\xce\x14\x0c\x96\x75\xdf\xd7\x02\x2b\x52\x73\xe7\x45\xa1\xfd\x90\x78\x4f\x14\xe8\x1b\xd7\xaa\x6d\xf4\x4d\xc2\x39\xa1\x4d\x95\x5b\x57\x91\x32\xf6\xbb\x20\xda\xd8\x33\x0b\x47\xcd\x32\x5e\x1d\xa5\x1f\x58\xc1\xec\xf9\xf4\xbe\x97\x00\x06\xb8\x2d\x8a\xff\xe9\x80\xf8\x41\x19\x9c\x90\xab\x44\x86\xee\x1b\x70\xee\x73\xec\x86\x17\x20\x79\x29\x36\x13\x8e\x1d\x73\xe0\x7a\xe6\xbc\x69\xa6\xb1\xf2\xed\x13\x6d\x6d\x7f\xbf\xc5\x18\x28\xbe\xee\xca\x83\x6d\xe5\x1b\xef\x64\x4b\x9f\xc7\x2b\xe7\x52\x8d\xd2\xa7\xdd\x21\xb4\x74\x1c\xbc\x76\xf2\xfd\x18\xae\x70\xce\xff\xc1\x6a\x92\xe5\x34\xe4\x1b\xf9\xc7\x21\xdc\x3c\x79\xeb\xf3\xb3\x85\xe1\x7b\x3a\x6b\x2b\x9d\x93\x9f\x32\xc9\x19\xde\xbe\xf2\x29\x0a\xef\x3e\xf7\x43\xaa\xb2\x6c\x43\x3e\xdf\xdd\x5c\x90\x2e\x28\x35\x05\x36\x03\x07\xb0\xa2\x53\x3b\x75\xe8\x8f\x34\x3d\xd1\x9c\x0b\x36\xc1\xa1\x9b\xa2\xf8\xdb\x21\x81\x30\x20\x71\x50\x0d\xb7\x4e\x7f\xa7\xb6\xee\x37\x67\xc1\xbe\xf2\x9a\x83\x2e\x4b\x3b\x84\x68\xa7\xd9\x7b\xec\x0f\x88\x95\x7e\x5c\xc3\x89\xb6\x8e\x7e\x4d\xa1\x5a\xbf\x8e\xc2\x5e\xa2\x6e\xe5\x1a\x3f\xc9\xd3\x93\xa1\x0b\x02\x7c\xe7\xbc\xea\xb8\x1c\xd0\xe9\x7d\x44\x97\x70\xbb\x51\xb2\x24\x7f\x32\x6d\x1e\x58\xde\xa9\xe7\xe9\xef\xed\x6c\xe3\x91\x55\x4f\x5a\xe1\x13\xd0\xb0\xe1\x06\x1d\xf8\xad\xa3\xe5\xd2\x9c\xf0\x49\x35\xcb\x65\xe4\xf1\x46\x2d\xae\x38\x76\x4c\x3d\xb6\xf8\xe8\xf6\x27\x95\x1b\x4a\xc2\xeb\xab\xdb\x71\x58\x53\xe0\xde\x13\xb4\x7a\x54\x4d\xa7\x5c\xf7\xd2\xbc\x09\xff\xa4\x12\x39\xbd\x47\xdc\x31\xfd\xbf\x3b\x08\x06\x69\x2e\xb8\xb4\x84\xef\x83\x03\x78\xec\xbe\xf1\xb2\x41\x77\x53\xb6\xe0\xbd\x5b\x72\xa2\x22\xfd\x66\x4a\x33\xb5\x8e\xe7\xa5\x2b\x62\x90\x71\xa4\x80\xda\xab\x4c\x8e\x54\xf6\x8c\x98\x94\xe1\x11\xf1\x89\x65\x9d\xf9\xd6\x32\x5b\x99\x63\x95\x71\x82\xe0\x80\x7b\xd3\xd5\x1f\x5b\xc1\x1c\xb1\xcc\x05\xd3\x6b\x04\x5b\x8d\xbc\x61\x8a\xaf\xa2\xe6\x09\xb2\x0f\xbf\x8f\xc7\xd7\x80\xd0\x56\x4a\x6c\xe5\x6e\x82\xe0\x5a\x86\xfc\x53\x0f\xdf\x3b\x2c\x3b\xcc\xf3\xa8\x45\xff\x46\xb2\xf0\x61\xd7\xca\x47\xf9\x41\x4d\xdd\xef\x06\xf9\x0b\x52\xd2\xe3\xc0\xcf\x64\x77\xc6\x82\xb6\x7e\x33\x23\x77\xb2\x6e\xf2\xc8\x6f\xe0\x83\x0f\x8a\x7f\x79\x3d\xca\x4a\x76\xe6\xe4\x1d\x50\x7b\x27\xc8\xd6\x6b\xa3\x73\x35\xd0\xdf\xbf\x01\x00\x00\xff\xff\x6e\x49\x33\xf3\x82\x0d\x00\x00")

func templatesGatewayServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGatewayServiceTmpl,
		"templates/gateway-service.tmpl",
	)
}

func templatesGatewayServiceTmpl() (*asset, error) {
	bytes, err := templatesGatewayServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gateway-service.tmpl", size: 3458, mode: os.FileMode(420), modTime: time.Unix(1460958274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInstrumentationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xd1\x4f\xdb\x3e\x10\x7e\x6e\xfe\x8a\xfb\x45\xfa\x49\xc9\x04\xa9\xa6\xbd\x21\x21\x0d\xd1\xb2\xa1\xb1\x16\x41\xb7\x3d\x9b\xe4\x5a\x2c\x62\x3b\xb3\x1d\x22\x56\xf2\xbf\xef\x6c\xb7\x21\x29\xed\xc4\x03\x48\x21\xcd\xe7\xbb\xcf\xe7\xef\xbe\xf3\x78\x0c\x1f\xde\xe7\x2f\x22\xaa\x2f\xd3\xd9\xf4\xe6\x6c\x31\x9d\xc0\xc5\xe5\xd5\x14\x8e\x8f\x61\x32\x87\xd9\x7c\x01\xd3\xc9\xe5\x02\x7e\xc8\x12\x8d\x81\xbc\x36\x56\x09\xe0\xd2\x58\x5d\x0b\x94\x96\x59\xae\x24\x70\x03\x1a\x7f\xd7\x5c\x63\xe1\xa8\x3e\xc3\x7a\x0d\x96\x0b\x34\x96\x89\x0a\xda\xd6\x81\xd7\x4c\x33\x81\x16\x35\xff\x83\x05\x34\xdc\xde\x9f\x10\xec\x56\xa6\xb2\xa8\x14\x97\x76\x46\xeb\x70\xea\x72\xb3\x01\x14\xf2\x6f\x68\x03\x22\xec\x05\xf5\x91\x41\xcc\xe2\xa9\xda\x89\xf1\xc8\x36\xc6\x54\x4a\x1a\x1c\x10\xf5\xa0\x61\xd4\x80\xaa\x07\x85\xa8\xf7\x92\x3f\xaa\x58\xfe\xc0\x56\x08\x82\x71\x19\x45\x5c\x54\x4a\x5b\x48\xa2\x51\xbc\x14\x36\xa6\x97\x13\x33\x8e\xc0\xd5\xc1\x97\xc3\x53\x3d\x83\xf9\x64\x43\x49\x40\x11\xf1\x8a\x94\xad\xef\xb2\x5c\x89\xf1\xbc\x91\x57\x2a\x67\xe5\xf8\x9a\x57\x38\xd1\xc8\xc4\x98\x35\x66\xc3\x83\xa5\xf1\xc7\x08\x1f\xb2\x70\xbf\x69\xa7\x5e\xfa\x4a\x1d\x3f\x70\x3b\x76\x0f\x35\x4e\xf3\x9c\x52\xd3\x28\xf2\x9b\xed\x38\xe0\x3b\x2f\x8a\x12\x1b\xa6\x11\x1c\x9e\x5b\x58\x47\x23\x1d\xaa\x3c\x57\xb5\xb4\x00\xb0\xe1\xc8\xfc\x37\xea\x6e\xfd\x8a\x59\x94\xf9\x53\xb7\xbe\xa0\xb3\x7e\xe5\xe4\xb3\x15\x19\x86\xca\x23\x9d\xcf\x8a\xe2\x90\xf5\x7c\xc0\xf6\xdf\x1e\xeb\xdc\xa2\x7e\xe4\x39\x46\x74\xb8\x65\x2d\x73\x48\x44\x73\xb8\xf8\x14\xce\x59\x59\xee\x61\x49\x5e\xfb\x6d\x8f\xbd\x52\x48\x54\x6d\xab\xda\xbe\xf2\x4b\xdb\x1e\x01\x6a\xed\x1e\xa5\x53\x27\x4e\x81\x4b\xd4\xe0\x4a\x4a\xee\x70\xc5\xa5\x9f\x17\x7f\x76\xb7\xec\xd5\xba\x57\xc5\x05\xc7\xb2\x80\x93\xd3\x4e\x1c\x0f\xac\xbf\xe1\xd3\x09\xc4\x21\x24\x3e\x82\x9f\xac\xac\x91\x80\x03\xc5\xc7\x6d\x34\x1a\xf9\x9d\xff\x49\x47\x11\x2f\x5c\xe4\xbb\xec\xb6\xd2\x44\xb2\x4c\xe2\xff\x1f\x63\x5f\x7e\xea\x88\x44\x93\xf5\x1b\x9b\xfd\x22\xc3\x24\xbd\x6a\xd3\x80\xbc\xec\x97\x66\xd4\xbe\xe4\x63\x3a\xc8\xdd\x34\xfd\x2d\xd9\xf3\x3b\x43\x3d\xc4\xc4\x0b\x74\xcb\x65\x8e\x41\xb1\x34\x25\x99\x3a\x7b\x90\x82\xca\x07\x06\x5b\x90\xeb\x4b\x03\x4b\xa5\xc1\xde\xe3\x01\xef\x6c\xd2\xb7\xaf\x51\x1b\xb6\x98\xa9\x26\x21\x6e\x82\x43\x33\x43\xe7\x48\xb3\x26\x3b\xec\xaf\xec\xed\xc6\x21\x21\x68\x86\x1d\xe7\x7f\xa7\x20\x79\xe9\xdb\xdd\x0d\x76\xef\x8e\x79\x06\x49\x75\x3e\x62\x6f\xba\x81\xee\x59\x5b\x6b\x09\x71\xe8\xc8\xee\x28\x77\xeb\x7b\x2e\x2c\x58\xb7\xfd\x9c\x30\xf1\x23\x37\xf4\x9b\x9c\xed\x71\xa9\x26\x37\x2e\x7f\x03\x00\x00\xff\xff\x6d\x0b\x3c\x90\x5f\x06\x00\x00")

func templatesInstrumentationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInstrumentationTmpl,
		"templates/instrumentation.tmpl",
	)
}

func templatesInstrumentationTmpl() (*asset, error) {
	bytes, err := templatesInstrumentationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/instrumentation.tmpl", size: 1631, mode: os.FileMode(420), modTime: time.Unix(1460859305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoggingTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6f\x9b\x30\x10\x7e\xae\x7f\xc5\xcd\x4f\x30\xb5\xf0\xb0\xb7\x4a\x95\x36\x2d\x6c\xaa\x94\x25\x55\x9a\x3d\x4f\x0e\x5c\x88\x15\xb0\x99\x31\x45\x5b\x9a\xff\xbe\xb3\x4d\x2a\x68\x52\x69\x52\x23\x81\xe0\xee\xf3\x77\xdf\x77\xdc\x25\x4d\xe1\xe3\x3b\x7f\x8c\x38\xbe\x67\x8b\x6c\xf5\x65\x9d\xcd\xe0\xdb\xfd\x3c\x83\x9b\x1b\x98\x2d\x61\xb1\x5c\x43\x36\xbb\x5f\xc3\x4f\x55\x61\xdb\xc2\x0a\xdb\x46\xab\x16\xc1\xfe\x69\x10\x64\x0b\x4a\x5b\x50\xc2\xca\x27\x74\x1c\x9f\xe1\x70\x00\x2b\x6b\x6c\xad\xa8\x1b\x38\x1e\x5d\xf0\x41\x18\x51\xa3\x45\x23\xff\x62\x01\xbd\xb4\xbb\x5b\x0a\xbb\x4c\xa6\x8a\x46\x4b\x65\x17\x94\x87\x3b\x77\x36\x99\x84\xc2\xf9\x15\xfe\xee\x88\x70\x04\x1a\x47\x26\x98\xb5\x53\x35\xc1\xf8\xc8\x09\x13\xb4\x4f\x88\x46\xa1\x29\x6a\x42\x35\x0a\x05\xd4\xbb\x1b\xce\x1a\x91\xef\x45\x89\x50\x0b\xa9\x18\x93\x75\xa3\x8d\x85\x88\x5d\x71\xd7\x3e\xce\xc0\x55\x96\xdb\xa9\x8f\x67\x68\x3f\xd9\x20\x02\x08\xc1\x4b\xea\x65\xb7\x49\x72\x5d\xa7\xcb\x5e\xcd\x75\x2e\xaa\xf4\x41\x36\x38\x33\x28\xea\x54\xf4\xed\xc0\x83\x55\xeb\x85\x87\x17\x55\xb8\x67\xaa\x34\x3a\x5e\xea\x9b\xbd\xb4\xa9\xbb\x2a\x5d\x72\x16\x33\xe6\x0b\xd1\x4b\x29\x55\xf9\x43\x16\x45\x85\xbd\x30\x08\xad\x35\x5d\x6e\xe1\xc0\xae\x5c\x0e\x8d\x83\x24\x73\xff\x18\xf8\x5f\x7f\xc2\x47\x34\x4f\x32\x47\x46\x25\x5d\xe7\xe6\x81\x11\x0a\xcc\x75\xd7\x54\x34\x11\x5b\xa3\x6b\xb0\x3b\xa2\x0e\x48\xc7\x28\x73\xb6\xed\x54\x0e\x51\xdd\x9f\x6b\x88\xe1\xab\xa8\xaa\x0b\xa5\xa2\xf3\xe1\xb8\x30\x0b\x31\x44\xba\xb3\x4d\x67\x2f\x7d\xdc\x6b\x40\x63\xdc\xa5\x4d\x4c\x26\x81\x74\x6e\xc9\xa4\x13\x13\x6d\x90\x74\xf8\xf1\x4e\xd6\x74\x0b\x79\x80\x5f\x34\x26\x75\x9f\x84\x76\xb8\x56\x44\x3e\xcc\x69\xe6\x77\xba\xe0\xd7\xc0\xdf\x90\xcb\xaf\x03\x50\x2a\x12\x43\xb8\x73\xf5\x01\x40\x5d\xa3\x3d\xcc\x6e\x69\x5f\xda\xce\x0c\xbb\xc7\x2f\x88\xe7\x6e\x23\x1b\x43\x15\xc4\xa6\x42\xd8\xa1\xc1\x50\x21\xf8\xa5\x12\xe1\x61\xa8\x4b\x2e\xb9\xf7\x3b\xbc\x5b\xad\xf7\x14\xf0\x06\x1f\xa5\xca\x31\x38\x8e\x43\x3a\xa6\xfb\x31\xf2\xc9\x85\xee\xa3\x98\x46\x04\x4e\x7c\xbe\x69\xbe\x0b\x6f\x0f\x40\xf2\xff\x1f\xcd\x95\xa2\xd9\x77\xa4\x1f\xee\x40\xc9\xca\x77\xfa\x65\x21\x46\x9e\x9f\x87\x3f\x9f\xd1\x56\x00\x18\xb4\x9d\x51\xc0\x83\xb9\xd7\x2b\xf0\x92\xbf\xd0\x40\x38\x1c\xc7\x67\xc2\xa6\x90\x6d\x67\x75\x38\x75\x72\x4c\xaa\xfc\x48\xb3\x7f\x01\x00\x00\xff\xff\x2c\x53\x14\xf6\x7f\x05\x00\x00")

func templatesLoggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoggingTmpl,
		"templates/logging.tmpl",
	)
}

func templatesLoggingTmpl() (*asset, error) {
	bytes, err := templatesLoggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logging.tmpl", size: 1407, mode: os.FileMode(420), modTime: time.Unix(1460859212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\x2a\x60\x01\x69\x61\x4b\x87\xdc\x5c\x64\xd1\x34\x71\x16\x06\x82\x34\x88\xd3\x43\x8f\x8c\x44\xc5\xec\x4a\x24\x4b\x52\xeb\xdd\xba\xfe\xef\x1d\x7e\x68\x2d\x39\xce\x7e\x04\x1b\x04\x8a\xc4\x99\x79\x33\xf3\xe6\x91\x4c\x59\xc2\xdb\xd7\xfd\x10\x0c\xbd\xbb\xb8\x7f\x58\x5d\xdc\xdc\xfc\x05\xef\x97\xb7\xcb\xfb\x8b\x87\xe5\x15\x5c\xaf\x6e\x96\x30\x9f\xc3\xb2\xe6\x16\xec\x86\x01\x17\x35\xaf\xa8\x65\x35\x18\x56\x59\x2e\x85\x71\xa1\xbf\xc1\x6e\x07\x96\x77\xcc\x58\xda\x29\xd8\xef\x3d\x1e\xd5\xb4\x63\x96\x69\xfe\x2f\xba\x6f\xb9\xdd\x2c\x70\xd9\x59\x96\xa2\x56\x92\x0b\x7b\x8b\x76\x38\x77\xb1\xc5\x64\x29\xc4\xdf\xb3\x7f\x7a\x04\x1c\x39\x8d\x57\x26\x3e\x0f\x9f\xd5\x91\x8f\x5f\x19\x7c\x8c\xc2\x3a\xd9\x04\x68\xb4\x34\xf5\x9a\x40\x8d\x96\x82\xd7\x2b\xe9\x7d\x4b\x88\xa2\xd5\x07\xfa\xc4\xa0\xa3\x5c\x10\xc2\x3b\x25\xb5\x85\x8c\x24\x69\xd3\xd9\x14\xff\x70\x59\x72\xd9\x5b\xde\xba\x0f\xc1\x6c\xb9\xb1\x56\xa5\x84\x80\x2b\x85\x37\xd3\xc6\xfe\x03\x73\x66\x43\x55\x80\x1e\xe9\x13\x92\xdb\x3f\x16\x95\xec\xca\x3f\xb6\xe2\x46\x56\xb4\x2d\xef\xb8\x62\x57\x9a\xd1\xae\xa4\x5b\x93\x06\x1c\xd6\x1a\xdf\x49\xf8\x10\xb5\x7b\x4f\xc6\xd1\x4a\x4b\x1c\xd9\x86\xf5\xa6\xc4\xcf\x4e\x8a\xb2\x95\x4f\x29\xc9\x09\xf1\xe9\x4e\x4c\x6a\xcd\xf4\x47\x5e\x39\x61\xe0\xa4\x1b\x8a\x6f\x3b\x72\x49\xdb\xf6\x84\x2b\x64\xcf\x07\x94\x0f\x8b\x13\xaa\x67\xc0\xb4\x96\x3a\x27\xfb\x98\xd8\xc4\x2c\xc6\xea\xbe\xb2\x3b\x5c\x3e\xc9\x8a\xa0\x96\x7f\x64\x5f\x98\x19\x3a\xfe\x2a\x7d\x23\x5a\x70\xc0\x57\xac\xe1\x82\x79\xa9\x9b\x2f\x9d\xa9\xde\xc6\xcc\x0e\x4a\x48\x1b\x13\x81\x03\x39\x30\x33\xed\x6c\x88\xd8\x11\x87\x7b\x51\xd7\x08\xe4\x71\xff\x36\x52\x0c\x46\xd6\xb2\x8e\x09\x6b\xd0\x40\xed\x24\xeb\x96\xb7\x2d\xf4\x58\x17\x35\xa0\x28\x6a\x45\x36\xde\xae\x43\x92\xc2\x81\xba\xed\x84\x14\x1d\x66\x79\x60\x65\x44\xe7\x37\x68\x99\x78\xfe\x08\x2f\xa8\xd6\xef\x26\x66\x32\xdd\x9f\xc1\x8c\x66\xb6\xd7\x02\x1e\x71\x57\xb9\x68\x8e\x8e\x3a\x66\x79\x81\x9a\xa6\x17\x15\x64\x11\x24\x87\x17\x34\x9a\x85\x69\xff\xa8\x50\xb1\x97\x48\xbd\xdb\x76\x2d\x52\x35\xec\x0b\xbf\xdb\xf0\xd7\x71\x28\xb7\xa2\x95\xb4\x8e\x07\xa9\xcb\xd3\xf0\x96\x01\x49\x10\x04\x16\xe7\x80\x1b\xb5\x18\x9c\x42\x21\x39\x49\x10\xd4\x99\x7f\x39\x07\xc1\x5b\xcc\x93\x24\xb8\x25\x8b\xa5\x4b\x9b\xa1\x21\x47\x6c\x18\xe8\x70\x00\xeb\x33\x57\xdb\x2e\x94\x46\x92\x3d\xf1\x0e\x98\x7e\xcd\x02\x8f\x71\x6e\x7e\x3a\x5c\x54\x6d\x5f\x73\xf1\x34\xb6\xa0\xda\x78\x83\x87\x3c\xb0\x4f\x96\x09\x83\x87\x3c\x42\x24\xd1\x18\xcb\x8c\x59\x7e\xef\xab\x0f\xcc\x2e\x42\x37\x45\xf8\x9a\xc1\x35\x76\xe5\xf8\x5c\x00\x1e\x6e\xc5\x5a\x69\xe4\xb7\xc9\xd2\x37\xa6\xb8\xbb\x7d\x9f\xce\xa2\xf7\xe0\x95\xcf\xe0\x52\xe2\xe9\x21\x3c\xd5\x0b\x48\xd1\x63\x55\x0f\x98\xab\x3a\xc8\x7a\xd0\xe2\x77\x29\x1c\xe0\x50\x6d\x9a\x8e\x54\x70\x78\x9b\x2a\xcf\x9d\xca\x80\xbc\xf2\x6a\xd8\x67\x51\x28\xce\xef\x5a\x6a\xf4\xc3\xab\x4d\x54\xcc\x5d\x61\x50\x75\xb5\x43\x9e\x34\xa7\xea\xc6\x4a\xa5\x3a\x98\x2b\x64\xf3\x8d\x81\x77\xf8\x78\xd6\xeb\x2c\x16\x76\x68\xde\xe1\xb9\x11\x7f\x62\x55\x71\x89\x47\x2e\x15\x75\x96\x9a\x0d\x46\xa6\xf3\x0a\x9f\x98\x2b\x2f\xee\x7b\x91\xe5\xbf\x4e\x75\x80\x71\x00\x47\x52\x28\xcb\xe4\x65\x29\x60\x80\x17\x83\x8b\x59\x89\x46\x66\xc7\xa5\xa5\x30\x7f\x07\xe9\x89\x12\xbf\xaa\x6d\x7f\x77\x46\x51\x5b\x4d\x85\x69\xa4\xee\xf0\xc2\x77\xd2\x46\xf3\xe3\x67\xcb\x8c\x2f\xc0\x51\x16\xae\xb8\xc2\x05\x38\xf8\xec\x59\xaa\x9f\x22\x77\x7f\x5e\x59\xfc\xff\xc4\x17\x55\x05\x71\x85\x33\x29\xca\xb8\x18\x29\x0e\x6f\x7b\x77\xd7\x16\x21\x64\x64\xc8\x7c\xed\x79\x44\xfc\x53\x85\xbd\x2b\x61\x7d\xe6\xcb\x74\xd9\xc3\x62\x6c\x63\x16\x9a\x3d\x1e\xd4\x6b\x3a\x88\xe6\x01\x17\x81\x26\x9b\x20\x39\x61\x3f\x48\x1b\x11\xfe\x0f\x00\x00\xff\xff\x37\x89\xee\xe5\x0a\x0a\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 2570, mode: os.FileMode(420), modTime: time.Unix(1460869386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSrvMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x6f\x6b\xfb\x36\x10\x7e\x1d\x7f\x8a\x43\x30\x70\x46\x6a\xbf\x0f\x14\x96\xad\x59\x5b\x96\x5f\x5a\x12\x97\x31\xc6\x08\xaa\xa5\x38\xa2\xb6\xe4\x49\x72\xda\x2c\xcb\x77\xdf\x9d\xff\xb4\x71\x93\x0c\x06\x7d\xb1\x42\x1d\xf9\xf4\xdc\xa3\xbb\xe7\x4e\xe7\x38\x86\xef\xbf\xe2\x2f\x40\xa2\xc7\xc9\x22\xb9\x9f\xcc\x66\xbf\xc1\xed\x74\x3e\x5d\x4c\x92\xe9\x0d\xfc\x7c\x3f\x9b\xc2\xd5\x15\xdc\x3c\xc0\xfc\x21\x81\xe9\xcd\x7d\x02\x95\xce\xa5\x73\x90\x56\xce\x9b\x02\x94\x76\xde\x56\x85\xd4\x9e\x7b\x65\x34\x11\xfd\x00\xfb\x3d\x78\x55\x48\xe7\x79\x51\xc2\xe1\x50\xb3\x73\xcb\x0b\xe9\xa5\x55\x7f\x49\x01\xaf\xca\x6f\xc6\x68\xa6\x9d\xa9\x16\xa5\x51\xda\xcf\x71\x1f\xae\xc9\x37\xea\x99\x1a\xff\x85\xfc\xb3\x42\xc2\x23\xd0\xb1\xa5\x87\x49\x76\xe5\x27\x4c\x6d\xe9\x30\xae\x34\xda\xc9\x1e\xd1\x91\xa9\x8f\xea\x51\x1d\x99\x1a\xd4\xd7\x48\x1f\x94\x3c\x7d\xe1\x99\x84\x82\x2b\x1d\x04\xaa\x28\x8d\xf5\x10\x06\x03\xb6\x2e\x3c\xc3\x1f\x2d\x7d\xbc\xf1\xbe\xa4\xb5\x71\xf4\x24\x71\x59\x80\x8b\x0c\x75\xac\x9e\xa3\xd4\x14\x71\x66\xae\x5e\x94\x8f\xe9\x3f\x37\x19\xbb\xb8\x89\x45\xb0\x2a\x25\x1a\x7c\x2b\xad\xc1\xf7\x8d\xac\x1c\xfc\x3b\x3c\xfe\x40\xa2\x27\x45\xe3\x2d\xd7\xae\x0e\xf5\x82\xe7\x3b\xa0\x0b\xde\x79\x71\xe1\xbc\x0f\x73\x9c\xe6\x0a\x7b\x69\x95\x99\x9c\xeb\xac\x7f\x2a\x6b\x8c\x91\xb1\x59\xfc\x16\x93\x2a\xa9\xd1\x5e\xbe\xa1\x48\xc3\x20\x58\x57\x3a\xad\x25\x0c\x87\xb0\x0f\x06\xa9\x7f\x83\xf1\x35\xb4\x88\xe8\x47\xd4\x38\xb3\xa6\xd2\x22\x44\x2c\x00\x56\x6f\x29\x7d\x55\x02\x6a\x95\x29\x9d\x05\x03\x5a\x48\x4b\x3e\xb8\x8a\xe6\xf2\x75\x66\x32\x2c\xc0\xac\x36\x87\xc6\x45\x4b\x2f\xa4\xb5\x7d\xef\xcf\xdd\x3f\x58\x2b\x99\x8b\x5f\xe4\xce\x11\xd1\xef\x7f\xe0\x2e\x92\xef\x19\x25\x61\x04\x1b\x01\x43\x0a\x63\xd9\x21\x18\xd8\xa6\x35\x7f\xc2\x98\x3c\x81\x7b\xd5\xa0\xf3\xeb\x1d\x3c\xba\x27\x5b\xd4\x5a\x1f\x4a\xef\xf6\x18\x09\xf5\xac\xc3\x06\x92\x63\x60\x67\x6e\xce\x2d\xa6\x5c\xb2\x11\x02\xeb\xa0\xf1\x0e\x4f\xc7\xb0\x2c\x65\xaa\xd6\x3b\x40\x42\x28\x54\x6a\xac\x93\x76\xab\x52\x09\x1a\x9d\x82\xc1\x60\x59\x3d\xbb\x9d\xf3\xb2\x40\xce\x6f\x2a\xb5\xa6\xdd\x5f\x11\x29\x92\x0d\x06\xb4\x18\x43\xfd\xc7\x8e\xf3\xa8\x37\xef\x64\x5e\x76\x9b\xf3\xaa\x78\x46\x51\xcd\x1a\x5a\x98\xc3\x45\xaa\xe4\x56\x0a\xc2\x1e\x46\xf0\x2e\x18\x0a\xdb\x69\x32\xe3\x5e\xea\x74\x47\xaa\xb4\xed\x47\x7a\x24\xd8\xf4\x77\x0a\x87\x4e\x86\x93\x24\xa4\x2b\x10\xb5\xd1\x61\x91\xc5\xe8\x54\xc0\x65\x55\x14\xdc\xee\x3e\x09\xd8\x5a\xff\x77\x02\xb6\x49\x1f\xa5\xe4\x4e\xe4\x4c\x8c\xe7\x39\x88\xca\xd6\xdd\xd6\x93\x55\x69\x0a\xe5\xdd\x35\x3a\x91\xb7\x6b\xdc\x89\x10\x17\x66\x37\xbe\x63\x67\xad\x51\x0b\x57\x43\x9b\x47\xe3\xf5\xab\xb2\x12\xb0\x6c\x76\xe7\x37\xd8\xd1\x80\x55\x20\x3d\x2d\xee\x6e\xb9\x05\xb7\x4d\xcf\x0d\xee\x65\x93\x37\x5e\x7d\xdc\xbf\x86\x56\x86\xfd\xa1\x33\xb4\x97\xef\x9b\x12\x22\x97\xaf\xdc\xca\x7d\x73\x0b\x47\x44\x78\x38\x0a\x98\x94\xbe\x10\xb4\x37\xf5\xee\x27\xf3\x07\x65\x77\xd6\x45\xc0\xfe\xb8\x83\x47\xd0\x2f\xc7\x47\x24\x1b\xae\xd1\xe1\x4c\x92\xd4\xa6\xbd\x81\x58\xf7\x1e\xa6\x8a\x77\x17\xeb\x87\x83\x88\xca\x58\xf0\x97\x73\xce\xdd\x6b\x88\xc7\x0c\x09\x27\xb0\x7e\xe2\x1c\xb2\xfd\x94\x11\x06\x03\x43\x4c\xf7\x41\x42\x4b\x5d\x5b\x8a\x21\xba\xab\xa3\x0c\x59\x7c\xc2\xf0\x37\xaa\xfd\x2a\x6d\xca\x1d\xb1\xe1\x28\xba\x98\xd0\xf0\x84\xac\xfb\x66\xa0\x1a\xbd\xbb\xd4\x00\x6c\x38\x24\x17\x1c\x96\xd1\x23\x8e\x3b\x9f\xeb\x90\x71\x21\xec\x35\xe2\x71\x6e\xde\xe2\x57\x5f\x6f\x43\xf6\xb4\x3a\x13\x53\x55\x96\xef\x31\xad\x9e\x16\x33\x56\x53\xad\xda\xde\x90\x36\xc2\xf9\x1b\xb2\xc2\x65\x34\x3b\xef\x92\xe4\x91\x7e\xbf\x96\x1c\x27\x32\xa9\x41\x09\xcf\x70\xbc\x48\x3d\xd1\xa2\x2e\x5f\x48\x19\x2d\x4b\x4a\x69\x1d\xb2\xf1\x77\xee\xbf\x1e\xf9\xf8\xb0\x48\xf0\xcc\x11\x68\x95\xb7\xcf\x00\x7b\xe9\x9f\x00\x00\x00\xff\xff\xf4\xe5\x83\x0d\xb5\x09\x00\x00")

func templatesSrvMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSrvMainTmpl,
		"templates/srv-main.tmpl",
	)
}

func templatesSrvMainTmpl() (*asset, error) {
	bytes, err := templatesSrvMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/srv-main.tmpl", size: 2485, mode: os.FileMode(420), modTime: time.Unix(1460824872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x4f\xdb\x4c\x10\x3d\x7b\x7f\xc5\x7c\x3e\x7c\xb2\x11\xd8\x87\xde\xa8\x90\x4a\x89\x5b\x21\xa1\x04\x41\xa4\x5e\xd9\x3a\x83\xd9\x12\xef\xba\xeb\x35\x81\xa6\xfe\xef\x9d\xf5\xae\x53\x3b\x38\x48\xd4\x12\xc2\x3b\x7e\x33\xf3\xde\xbc\xd9\xa4\x29\x1c\xbd\xe7\x61\x94\xf0\x35\x9b\x67\x37\xe7\xcb\x6c\x06\x5f\x2e\xaf\x32\x38\x39\x81\xd9\x02\xe6\x8b\x25\x64\xb3\xcb\x25\x5c\x5f\x65\xe7\xb7\x99\xc5\x7d\x82\xed\x16\x8c\x28\xb1\x36\xbc\xac\xa0\x6d\x6d\xf0\x9a\x6b\x5e\xa2\x41\x2d\x7e\xe1\x0a\x36\xc2\x3c\x9c\x52\xd8\x7e\xc9\xe4\xaa\x52\x42\x9a\x39\x7d\x87\x33\x9b\x9b\x8c\x42\x2e\xff\x06\x7f\x36\x54\x70\x00\x1a\x46\x46\x98\xe5\x4b\xb5\x87\xe9\x22\x3d\xa6\xae\x94\xac\x71\x54\x68\x10\x1a\xa3\x46\xa5\x06\x21\x87\x7a\xdf\x04\x59\xc5\xf3\x47\x5e\x20\x94\x5c\x48\xc6\x44\x59\x29\x6d\x20\x62\x41\x88\x32\x57\x2b\x21\x8b\xf4\x47\xad\x64\x48\x01\x89\x26\x7d\x30\xa6\x0a\x19\x03\xdb\x5c\xdc\x8f\xa5\xfc\x86\xfa\x83\x71\x3c\x80\x10\x61\x41\xe3\x6c\xbe\x27\xb9\x2a\xd3\xc5\x46\x5e\xa9\x9c\xaf\xd3\x6b\x51\xe1\x4c\x23\x2f\x53\xbe\xa9\x43\x57\x07\xd7\x75\xc7\xdd\x1d\xe4\xca\xbe\x07\xc3\xec\x42\x9d\x3c\x0a\x93\xda\x3f\xf4\x1e\x58\x3e\x85\x5a\x73\x59\x24\x4a\x17\xe9\x73\x6a\xc9\xe5\x4a\x1a\x7c\xa6\x6f\x31\x1b\x0c\x9e\x75\x9c\x26\x0c\xf4\xdf\xa1\x36\xba\xc9\x0d\x6c\x1d\x81\x3d\x07\x27\x0c\x83\x3b\x3b\x91\xd3\xf0\x35\x38\xbc\x63\x2d\x1b\x3a\xf5\x46\x6f\x07\x78\xdd\x7c\xe4\xfa\x94\xc7\xe3\xf6\x23\x38\xf5\x0f\x32\xad\x81\x1e\xaa\x4b\xde\xc1\xe0\xf1\x69\xa8\xf5\xb1\x2a\x85\xc1\xb2\x32\x2f\x3b\xc2\x3d\xbd\xa8\x8e\xd9\x7d\x23\x73\x5a\x87\x47\x9c\xe0\xfd\x17\xf7\x94\x4f\xe9\xba\x45\xfd\x24\x72\x8c\xa1\x37\x6a\x07\x20\x89\x81\x46\xd3\x68\x09\xb6\x41\x94\x9b\x67\xf0\x86\x25\x17\xee\xff\x31\x68\x6f\x09\xe1\x51\xdf\xf3\x1c\xb7\x6d\x0c\xd1\xe0\x74\x0c\xc4\x5f\xe9\xb8\x1b\x18\xa1\xe1\xf4\xac\x4f\x4a\xa2\xc3\x1e\xc7\x84\xae\x1d\xb5\x45\x63\xaa\xc6\x74\x75\x6c\x32\xe9\x48\x2e\xf8\x7a\x3d\x91\x1b\x51\xe1\x64\xcf\xe4\xb6\x8d\x59\x10\xd0\xe6\xdb\xf4\xff\xce\x40\x8a\x75\x47\xc5\x3e\x5e\xdd\x1b\x6e\x6f\x27\x48\x24\x99\x15\x14\xc5\x40\xda\xa8\x1a\x55\x6f\xd9\x3f\x56\x0b\xc3\x5d\x91\xd6\xfb\x3a\x43\xba\xc4\xb8\xbb\x0a\x9d\xb5\xab\x2e\x76\x78\x58\x91\x86\x23\x7b\xcf\x7b\xdd\x07\x1d\x78\xe2\x7a\xe7\xd8\xe1\x72\xac\x1f\x17\x4d\xdb\xae\x60\x32\xc7\x8d\xa3\xa5\x23\x9d\x7c\x56\xab\x97\x38\x71\xe7\xe8\x7f\x5f\x2d\xfe\x38\x9e\x6f\xd0\x6f\x0e\x1d\xbb\xfe\x56\x60\x1f\xf3\x39\x4e\x78\xbf\xcd\x5e\xb5\xbf\x85\x9d\xec\xee\xf7\x0c\xfb\x58\xb4\x01\xaf\xd1\x9d\xbf\x69\xba\x12\xda\x6e\xa0\xbf\x98\xa3\x15\xec\x24\x0f\x36\xb8\xd7\xe1\x1a\xe9\x68\x13\x27\xee\x35\xea\xf3\x63\x4b\xe5\x4f\x00\x00\x00\xff\xff\x95\x5e\xf9\x20\xd0\x06\x00\x00")

func templatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTransportTmpl,
		"templates/transport.tmpl",
	)
}

func templatesTransportTmpl() (*asset, error) {
	bytes, err := templatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/transport.tmpl", size: 1744, mode: os.FileMode(420), modTime: time.Unix(1460862707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Dockerfile.tmpl": templatesDockerfileTmpl,
	"templates/gateway-service.tmpl": templatesGatewayServiceTmpl,
	"templates/instrumentation.tmpl": templatesInstrumentationTmpl,
	"templates/logging.tmpl": templatesLoggingTmpl,
	"templates/service.tmpl": templatesServiceTmpl,
	"templates/srv-main.tmpl": templatesSrvMainTmpl,
	"templates/transport.tmpl": templatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Dockerfile.tmpl": &bintree{templatesDockerfileTmpl, map[string]*bintree{}},
		"gateway-service.tmpl": &bintree{templatesGatewayServiceTmpl, map[string]*bintree{}},
		"instrumentation.tmpl": &bintree{templatesInstrumentationTmpl, map[string]*bintree{}},
		"logging.tmpl": &bintree{templatesLoggingTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
		"srv-main.tmpl": &bintree{templatesSrvMainTmpl, map[string]*bintree{}},
		"transport.tmpl": &bintree{templatesTransportTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

