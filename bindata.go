// Code generated by go-bindata.
// sources:
// templates/Dockerfile.tmpl
// templates/gateway-service.tmpl
// templates/instrumentation.tmpl
// templates/logging.tmpl
// templates/service.tmpl
// templates/srv-main.tmpl
// templates/transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDockerfileTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xd0\x22\x02\x70\x01\xd5\xb9\xbb\xfa\xb9\x06\x39\x86\xb8\xba\x28\xb8\x79\xfa\xb8\x2a\xe8\xea\x2a\xb8\xa6\x64\x96\x28\x24\x16\x2b\xe4\xa5\x26\xa7\x16\x17\x27\x16\x55\x82\x94\x39\x28\x54\x57\x2b\x94\x64\xe6\xa6\x16\x97\x24\xe6\x16\x28\xd4\xd6\x72\x11\x6b\x87\x5b\x90\xbf\xaf\x42\x72\x6a\x5e\x49\x69\x51\x65\x4e\x66\x5e\xb6\x7e\x72\xa2\x6e\x72\x6a\x51\x49\xb1\x02\x57\xb8\x7f\x90\xb7\x8b\x67\x90\x82\x3e\x97\xa3\x8b\x8b\x42\x6e\x62\x66\x1e\x90\xe9\xec\xeb\xa2\x10\xad\xa4\x0f\xe2\x29\xc5\x72\x01\x02\x00\x00\xff\xff\x0b\x22\xaf\xa3\xca\x00\x00\x00")

func templatesDockerfileTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfileTmpl,
		"templates/Dockerfile.tmpl",
	)
}

func templatesDockerfileTmpl() (*asset, error) {
	bytes, err := templatesDockerfileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile.tmpl", size: 202, mode: os.FileMode(420), modTime: time.Unix(1460304884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGatewayServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x4f\xe3\x46\x10\x7e\x8e\xff\x8a\xa9\x55\x9d\xec\x13\xe7\x3c\xf4\x8d\x8a\xaa\x04\x02\x45\xa5\x80\x20\x3c\x54\xa7\x13\xb7\xb1\x37\xc9\x16\x7b\xd7\xac\xd7\xa4\xb9\x34\xff\x7b\x67\x76\x6d\x9f\x9d\xc4\x14\x50\x23\x21\xec\xd9\xf9\xf1\xed\xf7\xcd\xec\x7a\x38\x84\x8f\xef\xfb\x79\x18\x7a\x73\x7c\x3b\xb9\x38\xbe\xbc\xfc\x13\xce\xc7\x57\xe3\xdb\xe3\xc9\xf8\x14\xce\x2e\x2e\xc7\xf0\xe9\x13\x8c\x13\x61\xc0\x2c\x38\x08\x99\x88\x98\x19\x9e\x40\xc1\x63\x23\x94\x2c\x28\xf4\x57\x58\xaf\xc1\x88\x8c\x17\x86\x65\x39\x6c\x36\x36\x1f\xd3\x2c\xe3\x86\x6b\xf1\x0d\xdd\x97\xc2\x2c\x0e\xd1\x4c\x2b\x63\x99\xe4\x4a\x48\x73\x85\xeb\x70\x44\xb1\x51\xc7\xe4\xe2\x6f\xf9\x53\x89\x09\x5b\x4e\x6d\x4b\xc7\x67\xb2\xca\xb7\x7c\xac\xa5\xf6\x29\x72\xc4\xc9\x3b\x89\x5a\xa6\xae\x57\x27\x55\xcb\xe4\xbc\xe8\xef\x8e\xeb\x67\x11\xf3\x6b\x9d\x70\x7d\x48\x8e\x9a\xc9\x39\x87\x1f\x0b\x67\x87\xc3\x23\x88\xda\x3e\x18\x4a\x5e\xcd\x3a\xbe\x7e\xfa\x85\x2c\x5c\x26\xf8\x12\xd9\xa4\xef\xd4\xed\xa3\xe7\xe5\x2c\x7e\x64\x58\x3f\x63\x42\x7a\x9e\xc8\x72\xa5\x0d\x04\xde\xc0\x9f\xae\x0c\x2f\x7c\x7c\xe0\x32\x56\x89\x90\xf3\xe1\x5f\x85\x92\xd6\xa0\xb5\xd2\x76\x49\xa8\xa1\x50\xa5\x11\x29\xbd\x48\x6e\x86\x0b\x63\x72\x7a\x56\xb8\x8c\xff\xe6\xa8\x5a\x39\x8d\x62\x95\x0d\x73\xad\x50\xcd\x05\x2f\x8b\x21\xbe\x66\x4a\x0e\x53\x35\xf7\xbd\xd0\xf3\x0c\xf1\xb3\x47\xc4\x8a\x04\xec\x19\x6c\x82\x19\xc3\xa7\xb5\x77\xc2\xd2\x74\x8f\x2b\x04\xbb\xda\x85\xb5\xb1\xa3\xc2\x01\x58\xf4\xa1\xb7\xa9\x0a\xd7\xb4\x16\x46\x97\xb1\x59\xd7\xe6\xbb\x9f\x6c\x80\xb3\x62\xe1\xc1\x89\x42\x18\xd2\xd4\x56\xe4\x03\xbe\x12\x21\x87\x7e\xec\x56\x1e\x28\xce\xff\xea\x0d\x46\x65\xfc\xc8\x0d\xd8\x5f\xd7\x73\x6a\x57\xc8\xe7\x4c\xa4\xae\x7b\x76\x7c\x66\xb8\xf2\x20\x71\x89\xdc\x2e\x12\x68\x7e\x5d\x37\x91\xe0\x3a\x82\x7d\x55\xff\x34\x14\xb7\x9a\xa8\x22\xeb\xfb\x0e\x77\x96\x6b\x0e\xaa\x8a\xed\xf5\x7f\x20\x55\x4b\xae\x63\x56\xf0\xcd\x46\xf3\x27\x8b\xa5\x69\x49\xcf\x9b\x95\x32\x86\xa0\xf2\x0e\xa1\x47\xb5\x40\xc8\xbc\x34\x55\x19\x94\x2b\x63\xf9\x67\xb7\xcb\x2f\x8d\xe6\xeb\x46\x31\x84\xe8\x01\xd6\x9d\x9f\xa5\x6c\x4e\xbb\xf4\x3f\xef\xc9\xf9\xc5\x27\x2f\x31\x03\x9b\x3b\x6a\x78\x3e\x42\x7f\x9f\x74\x1c\x60\x36\x8a\x76\x4d\x1c\x5d\xf1\x65\xe0\x9f\x2b\x03\x4c\x02\xcf\x72\xb3\x02\x12\x00\x48\x00\x4c\x61\xcf\xac\x39\x9e\x57\x4b\xb6\x8a\xfc\x10\xa3\xb1\x7e\x34\xa6\xd0\xa0\x42\x62\xe1\xd1\x8a\xe6\xa6\xd4\x12\xa4\x48\xad\xc9\x1b\x6c\x08\x09\xce\xe6\x85\x04\x65\x85\x30\x0a\x1e\x39\xcf\xab\x83\x10\x37\xc8\xdc\x11\x08\x53\x6e\x96\x9c\x23\x00\x16\x2f\x9a\x86\x64\xc8\x65\x55\x1a\x0a\x9c\xcb\x94\x63\xba\x67\xa6\x41\xf2\xbf\x0d\xb4\x08\xa2\x32\xdf\xdb\xc0\x96\x3a\x78\xb1\x1d\xd0\x19\x09\x72\x9e\x28\xe5\x37\xae\x15\xa9\x06\xd0\x23\xb1\x6d\x87\xa2\x4c\x8d\xdd\x18\x65\xec\xf6\x4a\xb0\xb7\xb3\xd6\x56\x81\x4d\x48\x6d\x91\xda\x24\xff\x7b\x05\x62\x22\x0a\xaa\xfe\x71\x95\x5c\x03\x02\x0c\x70\x87\x94\xea\x87\x23\x52\x04\x85\xb7\xad\xb3\x2d\x9d\x6f\xdf\x21\xc6\xfe\xa4\xd9\xea\x47\xe7\xc4\xdf\x2f\xb1\xd5\xe3\xa8\x2f\xb8\xde\x19\xb8\xdd\xd7\x13\x02\x80\xe7\x26\x75\x3f\xee\xd5\x6d\x63\x7f\xf7\x63\xd9\xaa\xaa\xf3\x3f\xa0\xea\x34\xf8\xaf\x1d\x7d\x37\x8b\x5b\x74\x62\x41\xae\x25\x4b\x69\xca\xf7\x52\x8b\xd3\xb8\x7f\x04\x77\x27\xb0\x87\x31\x1c\x44\x80\x52\xa7\xe4\xa7\x8a\xe8\x1c\x6f\x72\xf9\x1c\xf8\xf7\x0f\xdd\x90\x32\xcf\x9b\x90\x87\xfb\xdb\x4b\xe2\x19\xa5\xa3\xc0\x7a\x64\x01\xb6\x78\x6f\xe6\x16\xfd\x91\xd0\x67\x9a\x0a\xc1\xa6\x38\xb6\x33\x14\xb3\x1f\x12\x88\x02\x24\x8e\x7a\xc1\x8d\xd5\xd3\xca\xa0\xbb\x7d\x97\xb1\x47\x5e\x71\xd0\x66\xe9\x80\x10\x1d\xd4\x7b\x0f\xdd\x11\xb3\xd5\x5f\x3b\x38\xd1\x86\x25\x6a\xfd\xea\x42\x95\x7e\xad\x5e\x70\x12\xb5\x2b\x57\xf8\x49\x9e\x8e\x0c\x6d\x10\xd5\x85\xf0\xaa\x73\x73\x40\x47\xf8\x88\x2e\xf4\x66\xa3\x64\x89\xfe\x60\xba\x58\xb0\xb4\x55\xcf\xd1\xdf\xd9\xd9\xde\x43\xaf\x9a\x9c\xcc\x25\xa0\xe1\xc1\x0d\x5a\xf0\xbd\xa3\x62\xd3\x9c\xf2\x69\x39\x4f\x65\xe0\xf0\x06\x0d\xae\x30\xb4\x4c\x3d\x35\xf8\xe8\x4b\x82\x54\xae\x29\xf1\x6f\xae\xef\x26\x7e\x45\x81\xfd\x36\xa1\xd5\x51\x39\x9b\x71\xdd\x49\xf3\x26\xfc\xd3\x52\xa4\xf4\x6d\x63\xcf\xe4\xff\xdc\x81\x37\x88\x53\x81\x57\x3d\xe1\xfb\x60\x01\x9e\xd8\x77\x3c\x83\xd1\xbd\xc8\x1b\xf0\xce\x2d\x3a\x55\x81\x7e\x33\xa5\x89\xda\xc5\xf3\xd2\x25\x33\x48\x38\x52\x40\xed\x95\x47\x23\x95\xac\x10\x93\x2a\x78\x40\x7c\x62\x59\x6b\xbe\x33\xcc\x94\xc5\x89\x4a\x38\x41\xb0\xc0\x9d\xe9\xfa\xf7\x5e\x30\x23\x96\xd8\x60\xfa\x76\xc2\x56\x23\x6f\x98\xe1\x37\x5c\x7d\x3f\x1d\xc2\x6f\x93\xc9\x0d\x20\xb4\xad\x12\xbd\xdc\x4d\x11\x5c\xc3\x90\xfb\x6c\xc4\xaf\x33\x96\x1c\xa7\x69\xd0\xa0\x7f\x23\x59\x1a\xe3\x6b\xba\x28\x3f\xa8\x99\x7d\xae\x91\xbf\x20\x25\x5d\xa5\x6e\x26\xbb\x97\x69\x5d\xbf\x9e\x91\x7b\x59\x35\x79\xe0\x36\xf0\xc1\x05\x85\x3f\xbf\x1e\x65\x29\x5b\x73\xf2\x0e\xa8\x9d\x13\xa4\xf7\xa6\x68\x5d\x0d\xf4\xfb\x37\x00\x00\xff\xff\xeb\x6e\x66\x8a\xce\x0d\x00\x00")

func templatesGatewayServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGatewayServiceTmpl,
		"templates/gateway-service.tmpl",
	)
}

func templatesGatewayServiceTmpl() (*asset, error) {
	bytes, err := templatesGatewayServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gateway-service.tmpl", size: 3534, mode: os.FileMode(420), modTime: time.Unix(1460852313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInstrumentationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x61\x6f\x9b\x30\x10\xfd\x8c\x7f\xc5\x0d\x69\x12\x4c\x2d\xd1\xbe\x56\xaa\xb4\xaa\xa5\x5b\xb5\x2e\x9d\xda\x6c\xfb\x4c\xe0\x48\xac\x82\xcd\x6c\x13\x94\x65\xfc\xf7\x9d\xed\x24\x85\x36\x99\xfa\xa1\x91\x08\xc9\xf3\xdd\xf3\xf1\xde\xc3\x93\x09\x7c\x78\x9b\x0f\x23\xaa\xcf\xe9\x34\xbd\xbf\x98\xa5\x57\x70\x7d\x73\x9b\xc2\xe9\x29\x5c\xdd\xc1\xf4\x6e\x06\xe9\xd5\xcd\x0c\x7e\x88\x0a\xb5\x86\xbc\xd5\x46\xd6\xc0\x85\x36\xaa\xad\x51\x98\xcc\x70\x29\x80\x6b\x50\xf8\xbb\xe5\x0a\x0b\x4b\xf5\x09\x36\x1b\x30\xbc\x46\x6d\xb2\xba\x81\xbe\xb7\xe0\xf7\x4c\x65\x35\x1a\x54\xfc\x0f\x16\xd0\x71\xb3\x3c\x23\xd8\xae\xa4\xa2\x68\x24\x17\x66\x4a\xeb\x70\x6e\x7b\x93\x11\xe4\xfb\xef\x69\x03\x22\x1c\x14\x0d\x91\x51\xcd\x6c\xdd\x3c\xab\x71\xc8\xae\x46\x37\x52\x68\x1c\x11\x0d\xa0\x71\xd5\x88\x6a\x00\xf9\xaa\xb7\x92\x9f\x35\x59\xfe\x98\x2d\x10\xea\x8c\x0b\xc6\x78\xdd\x48\x65\x20\x62\x41\x58\xd6\x26\xa4\x9b\x15\x33\x64\xf4\x63\x41\xba\xb5\xf3\x24\x97\xf5\x64\x21\x4f\x1f\xb9\x99\xd8\x8b\x74\x55\x3c\xd7\x21\x8b\x19\x33\x76\xbc\x67\x06\x7d\xe3\x45\x51\x61\x97\x29\x04\x8b\xe7\x06\x36\x2c\x50\x5e\x9a\x4b\xd9\x0a\x03\x00\x5b\x8e\xc4\xfd\x47\xb5\x5f\xbf\xcd\x0c\x8a\x7c\xbd\x5f\x9f\xd1\x28\x5f\x38\xc5\x60\x41\x7e\x32\x00\x92\xe1\xa2\x28\x8e\x25\xc3\x15\xec\xbe\x0e\x38\xfb\x80\x6a\xc5\x73\x64\x3d\x63\x65\x2b\x72\x88\xea\xee\xf8\xf0\x31\x5c\x66\x55\x75\x80\x25\x7a\x19\x87\x03\xee\xc7\x10\xc9\xd6\x34\xad\x79\x61\x67\xdf\x9f\x00\x2a\x65\x2f\xa9\x62\x2b\x4e\x81\x25\x2a\xb0\x23\x45\x73\x5c\x70\xe1\xe2\xec\x9e\xdd\x2e\x3b\xb5\x96\xb2\xb8\xe6\x58\x15\x70\x76\xbe\x17\xc7\x01\x9b\xaf\xb8\x3e\x83\xd0\x97\x84\x27\xf0\x33\xab\x5a\x24\xe0\xc8\xf0\x61\xcf\x82\xc0\xed\xfc\x5f\x3a\xaa\x78\xe2\xa2\x58\x24\x0f\x8d\x22\x92\x32\x0a\xdf\xaf\x42\x37\x7e\x6c\x89\xea\x2e\x19\x1a\x9b\xfc\xa2\xc0\x44\x83\x69\x63\x8f\x3c\xed\x17\x27\x64\x5f\xf4\x31\x1e\xf5\x6e\x4d\x7f\x4d\xf7\xdd\x5c\x93\x87\x18\x39\x81\x1e\xb8\xc8\xd1\x2b\x16\xc7\x24\xd3\x3e\x1e\xa4\xa0\x74\x85\x3e\x16\x39\x49\xa1\xa1\x94\x0a\xcc\x12\x8f\x64\x67\xdb\xbe\xbb\x05\xbd\xdf\x62\x2a\xbb\x88\xb8\x09\xf6\x66\x7a\xe7\x48\xb3\x2e\x39\x9e\xaf\xe4\xf5\xc1\x21\x21\x78\xe9\x38\xdf\x9d\x83\xe0\x95\xb3\x9b\xca\x08\x1c\x1f\x01\x7f\x41\xd0\x9c\x2b\x34\x3e\x5d\xe0\x06\x55\x68\x5a\x25\x20\xf4\x8e\xf8\x4e\xac\xb4\x3b\x30\x06\xeb\x07\xce\x13\xd8\xf4\xc3\x1e\x51\xd8\x96\x80\xde\x8b\x60\xdb\xb3\x7b\x5c\x9a\xc9\xbe\x2e\xff\x02\x00\x00\xff\xff\x66\x94\x38\xb4\xfe\x05\x00\x00")

func templatesInstrumentationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInstrumentationTmpl,
		"templates/instrumentation.tmpl",
	)
}

func templatesInstrumentationTmpl() (*asset, error) {
	bytes, err := templatesInstrumentationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/instrumentation.tmpl", size: 1534, mode: os.FileMode(420), modTime: time.Unix(1460304957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoggingTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6b\xdb\x30\x10\x7e\xae\x7e\xc5\x4d\x4f\xf6\x48\x9c\xf7\x42\x61\x63\xf1\x46\x21\x4b\x47\x9a\x3d\x0f\xc5\xbe\x38\x22\xb6\xe4\xc9\x72\xcd\x96\xf9\xbf\xef\x24\x39\x60\x13\x17\x0a\x0d\xd8\xc8\x77\x9f\x4e\xdf\xf7\xdd\x29\xab\x15\x7c\x7c\xe7\x8f\x51\x8d\x6f\xe9\x36\xdd\x7d\xde\xa7\x6b\xf8\xfa\xb8\x49\x61\xb9\x84\xf5\x13\x6c\x9f\xf6\x90\xae\x1f\xf7\xf0\x53\x95\xd8\x34\xb0\xc3\xa6\xd6\xaa\x41\xb0\x7f\x6a\x04\xd9\x80\xd2\x16\x94\xb0\xf2\x05\x5d\x8d\x4f\x70\xb9\x80\x95\x15\x36\x56\x54\x35\xf4\xbd\x0b\xfe\x10\x46\x54\x68\xd1\xc8\xbf\x98\x43\x27\xed\xe9\x9e\xc2\x2e\x93\xaa\xbc\xd6\x52\xd9\x2d\xe5\xe1\xc1\xed\x4d\x26\xa1\xb0\x7f\x87\xbf\x5b\x2a\x38\x02\x8d\x23\x13\xcc\xde\xb1\x9a\x60\x7c\xe4\x8a\x09\xdc\x27\x85\x46\xa1\x29\x6a\x52\x6a\x14\x0a\xa8\x77\x1b\xce\x6a\x91\x9d\x45\x81\x50\x09\xa9\x18\x93\x55\xad\x8d\x85\x88\xdd\x71\x67\x1f\x67\xb4\x28\xc8\xa9\xf6\x90\x64\xba\x5a\x15\x7a\x79\x96\x76\xe5\x9e\x52\x17\x9c\xc5\x8c\xf9\x06\xd0\x47\x21\x55\xf1\x5d\xe6\x79\x89\x9d\x30\x08\x8d\x35\x6d\x66\xe1\xc2\xee\x5c\x0e\x8d\x83\x24\x1b\xbf\x64\x30\xe7\xf0\x33\x9a\x17\x99\x21\xeb\x19\x73\xc2\x36\xa1\x22\xe4\x98\xe9\xb6\x2e\xa9\x61\x47\xa3\x2b\xb0\x27\x2a\x1d\x90\xae\xa2\xcc\xd8\xb1\x55\x19\x44\x55\x77\xcb\x21\x86\x2f\xa2\x2c\x67\x8e\x8a\x6e\x7b\x37\xd3\xaa\x18\x22\xdd\xda\xba\xb5\x73\xde\x2f\x00\x8d\x71\x8f\x36\x31\x89\x04\xe2\x79\x24\x91\x8e\x4c\x74\x40\xe2\xe1\xa7\x2f\xd9\xd3\x2b\xe4\x01\x7e\x51\x17\xab\x2e\x09\x76\x38\x2b\x22\x1f\xe6\x34\x92\x27\x9d\xf3\x05\xf0\x57\xe8\xf2\x45\x00\x4a\x45\x64\x08\x77\xcb\x3e\x00\xc8\x35\xba\x26\xe9\x3d\x8d\x73\xd3\x9a\xe1\x6a\xf0\x19\xf2\xdc\x5d\x98\xda\xd0\x09\xe2\x50\x22\x9c\xd0\x60\x38\x21\xe8\xa5\x23\xc2\x62\x38\x97\x54\x72\xaf\x77\xf8\xb6\x5a\x9f\x29\xe0\x05\x3e\x4b\x95\x61\x50\x1c\x87\x74\x4c\xef\x3e\xf2\xc9\xad\xee\xa2\x98\x46\x04\xae\xf5\xbc\x69\xde\x85\xd7\x07\x20\x79\x7b\xd3\xdc\x51\xf2\xe8\x8b\x7e\x78\x00\x25\x4b\xef\x34\xe1\x28\x38\xd5\xfc\x6f\xf8\x6f\xb0\xc1\x00\xf0\x4c\x0d\xda\xd6\x28\xe0\x41\x5c\xd8\x89\x65\xe3\xaf\xd6\x28\x3f\x63\x20\x5c\xfa\xf1\x1e\x95\x87\x2d\xbd\x93\x3a\xec\xba\x2a\x26\x56\x7e\xa4\xd9\xff\x00\x00\x00\xff\xff\x0e\xd8\xfc\xbe\x1e\x05\x00\x00")

func templatesLoggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoggingTmpl,
		"templates/logging.tmpl",
	)
}

func templatesLoggingTmpl() (*asset, error) {
	bytes, err := templatesLoggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logging.tmpl", size: 1310, mode: os.FileMode(420), modTime: time.Unix(1460304979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x51\x4f\xe4\x36\x10\x7e\x8e\x7f\xc5\x34\xd2\x49\xc9\x69\x49\x1e\x78\xdb\x8a\xaa\x14\x96\xd3\x49\x88\x22\xa0\x0f\x7d\x34\x89\xc3\xba\x24\xb6\x6b\x3b\xb7\xbd\x6e\xf9\xef\x9d\x89\x9d\xee\x7a\xe1\x54\x40\x87\x50\x36\xb1\xbf\xf9\x66\xe6\x9b\x19\xbb\xae\xe1\xe3\xfb\xfe\x18\x9a\x5e\x9f\xde\xdc\x7d\x3e\xbd\xbc\xfc\x1d\x3e\xad\xae\x56\x37\xa7\x77\xab\x73\xb8\xf8\x7c\xb9\x82\xa3\x23\x58\xb5\xd2\x83\x5f\x0b\x90\xaa\x95\x0d\xf7\xa2\x05\x27\x1a\x2f\xb5\x72\x64\xfa\x33\x6c\xb7\xe0\xe5\x20\x9c\xe7\x83\x81\xa7\xa7\x89\x8f\x5b\x3e\x08\x2f\xac\xfc\x1b\xe1\x1b\xe9\xd7\x4b\x5c\xa6\x9d\x95\x6a\x8d\x96\xca\x5f\xe1\x3e\x9c\x90\x6d\x95\x2c\x05\xfb\x1b\xf1\xe7\x88\x84\x7b\xa0\xfd\x95\x04\x73\xf7\xd5\x1c\x60\xa6\x95\x19\xe3\x0c\xc6\x29\x12\xa2\xbd\xa5\x14\x95\x50\xed\x2d\x05\xd4\x3b\xe5\xfd\xc8\x98\xe1\xcd\x23\x7f\x10\x30\x70\xa9\x18\x93\x83\xd1\xd6\x43\xc1\xb2\xbc\x1b\x7c\x8e\x3f\x52\xd7\x52\x8f\x5e\xf6\xf4\xa1\x84\xaf\xd7\xde\x1b\x7a\xd7\xae\x16\x7f\x89\x26\x67\xf8\xfe\x80\x22\x8e\xf7\x55\xa3\x87\xfa\xd7\x8d\xba\xd4\x0d\xef\xeb\x6b\x69\xc4\xb9\x15\x7c\xa8\x8d\x34\x7c\xe3\xf2\x14\x67\xac\xc6\x22\xac\xc5\xe8\x6a\xfc\x1c\xb4\xaa\x7b\xfd\x90\xb3\x92\x31\x4f\x69\xbd\xa0\xfd\xad\xb0\x5f\x64\x43\xa5\xc6\xda\x75\x1c\xdf\xb6\xec\x8c\xf7\xfd\x0b\x50\x28\x9e\x4b\x5e\xce\x8b\x89\x78\x0b\x10\xd6\x6a\x5b\xb2\xa7\xe8\xd8\x45\x2f\xce\xdb\xb1\xf1\x5b\x5c\x46\x2b\xd9\xa5\x6c\xff\x80\xe2\x5e\x7e\x11\x3e\x90\x00\x61\x44\xef\xc4\x0b\x40\x77\xfc\x0c\x14\x4a\x76\x2e\x3a\xa9\xc4\xd4\xbc\xee\xbf\xcc\xcc\xe8\xa3\x67\xa2\x52\xda\x47\x47\x40\x24\x3b\x65\xd2\xcc\x66\x8b\x2d\x23\xde\xd3\xb6\x45\xa2\x89\xf7\x0f\xa7\xd5\xbc\x29\x7a\x31\x08\xe5\x1d\x6e\x70\x9f\x78\xdd\xc8\xbe\x87\x11\xe3\xe2\x0e\x0c\xc7\xea\xeb\x6e\xda\xb7\xc1\x49\x45\xa4\x34\x20\x28\x11\x65\xa0\x5a\x4a\x60\xa7\xca\x9e\x9c\xff\x23\x4b\x82\x7c\x8b\x2e\xd8\x7f\xaf\x16\x26\xa9\xee\xf7\x50\xc6\x0a\x3f\x5a\x05\xf7\x38\x27\x64\x2d\x11\x68\xa3\x97\x6f\x48\xd3\x8d\xaa\x81\x22\x92\x94\xf0\x8d\x1e\x2d\x42\xb5\xdf\xda\xa8\x98\x4b\x94\x9e\x06\xac\x47\xa9\xe6\xb9\x40\xd7\x00\xf8\x4f\x1a\xea\x8d\xea\x35\x6f\xe3\xd1\x48\x7e\x3a\xd9\x0b\x60\x19\x92\xc0\xf2\x04\x70\x1e\xab\x19\x14\x02\x29\x59\x86\xa4\xb4\xfd\xc3\x09\x28\xd9\xa3\x9f\x2c\xc3\x91\xac\x56\xe4\xb6\xc0\x0d\x44\x64\x51\x8c\x3c\x9f\xc2\x61\x19\x66\x0b\x90\xc5\xfa\x44\xde\xdb\x63\x0a\x79\xfb\xcb\xd8\x3c\x0a\xbf\x0c\xee\xab\xf0\xb5\x80\x0b\x0c\x83\x04\x58\x02\x9e\x2f\xd5\xad\xb1\x28\x48\x57\xe4\x1f\x5c\x75\x7d\xf5\x09\x59\x03\x7a\x46\x95\x0b\x38\xd3\x38\xee\x6a\xd2\x66\x89\x7e\x43\xe7\xcd\xed\xf2\xaa\x26\x04\xd8\xc5\x97\xe7\x7b\x85\xda\xbd\xa5\xcd\x41\x47\x21\x60\xea\xb2\x99\x47\x21\xd6\x92\x70\x17\xda\x22\x0e\xef\x13\xd5\x08\xba\x37\xa0\x19\x5a\x62\x4e\xd2\x31\x6d\xe7\xb5\x31\x03\x1c\x19\xf5\x00\x1f\x1c\xfc\x84\x8f\x67\xd9\x2d\x62\x60\xbb\x74\x89\x8f\xaa\x80\xe7\x6a\x75\x86\xa7\x22\x57\x6d\x91\xbb\x35\x5a\xe6\x47\x0d\x3e\xd1\x57\x59\xdd\x8c\xaa\x28\x7f\x4c\x4b\x85\x76\x00\x07\xd5\xaa\xeb\x0c\x0e\xea\x85\xb0\xdd\xe8\xbe\xd8\x3f\xd3\x8d\x13\x1b\xa7\x8d\x0d\x82\xb7\xe4\xd4\x3d\x38\x32\xad\x74\x8f\x88\xba\xff\xea\x85\x9b\x28\x29\xf5\x70\x3f\x54\x64\x47\x99\x14\x07\x35\x7c\x7f\x63\x4d\xa7\x81\xc7\xfb\x7c\x0a\xa7\x09\x9d\x10\x26\x3e\xf6\x5c\xb5\xd7\x1e\x78\x3b\xd2\xdd\x54\x05\x93\xbd\x8d\x62\x0a\xb7\x8c\x8c\xbf\x99\x30\x19\x1a\x6e\x8f\xa7\xd0\xa8\x67\xc3\x62\x11\x48\x17\x21\xbf\x43\x8d\x5f\x1b\x75\x5c\x9c\x6b\x3b\xf6\xfd\x35\xf7\xeb\x02\x7b\x19\x79\x92\xf6\xcd\x12\x68\xd8\xdf\x35\x25\x92\xfd\x1b\x00\x00\xff\xff\xcc\x14\x24\x79\x39\x09\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 2361, mode: os.FileMode(420), modTime: time.Unix(1460858269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSrvMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x6f\x6b\xfb\x36\x10\x7e\x1d\x7f\x8a\x43\x30\x70\x46\x6a\xbf\x0f\x14\x96\xad\x59\x5b\x96\x5f\x5a\x12\x97\x31\xc6\x08\xaa\xa5\x38\xa2\xb6\xe4\x49\x72\xda\x2c\xcb\x77\xdf\x9d\xff\xb4\x71\x93\x0c\x06\x7d\xb1\x42\x1d\xf9\xf4\xdc\xa3\xbb\xe7\x4e\xe7\x38\x86\xef\xbf\xe2\x2f\x40\xa2\xc7\xc9\x22\xb9\x9f\xcc\x66\xbf\xc1\xed\x74\x3e\x5d\x4c\x92\xe9\x0d\xfc\x7c\x3f\x9b\xc2\xd5\x15\xdc\x3c\xc0\xfc\x21\x81\xe9\xcd\x7d\x02\x95\xce\xa5\x73\x90\x56\xce\x9b\x02\x94\x76\xde\x56\x85\xd4\x9e\x7b\x65\x34\x11\xfd\x00\xfb\x3d\x78\x55\x48\xe7\x79\x51\xc2\xe1\x50\xb3\x73\xcb\x0b\xe9\xa5\x55\x7f\x49\x01\xaf\xca\x6f\xc6\x68\xa6\x9d\xa9\x16\xa5\x51\xda\xcf\x71\x1f\xae\xc9\x37\xea\x99\x1a\xff\x85\xfc\xb3\x42\xc2\x23\xd0\xb1\xa5\x87\x49\x76\xe5\x27\x4c\x6d\xe9\x30\xae\x34\xda\xc9\x1e\xd1\x91\xa9\x8f\xea\x51\x1d\x99\x1a\xd4\xd7\x48\x1f\x94\x3c\x7d\xe1\x99\x84\x82\x2b\x1d\x04\xaa\x28\x8d\xf5\x10\x06\x03\xb6\x2e\x3c\xc3\x1f\x2d\x7d\xbc\xf1\xbe\xa4\xb5\x71\xf4\x24\x71\x59\x80\x8b\x0c\x75\xac\x9e\xa3\xd4\x14\x71\x66\xae\x5e\x94\x8f\xe9\x3f\x37\x19\xbb\xb8\x89\x45\xb0\x2a\x25\x1a\x7c\x2b\xad\xc1\xf7\x8d\xac\x1c\xfc\x3b\x3c\xfe\x40\xa2\x27\x45\xe3\x2d\xd7\xae\x0e\xf5\x82\xe7\x3b\xa0\x0b\xde\x79\x71\xe1\xbc\x0f\x73\x9c\xe6\x0a\x7b\x69\x95\x99\x9c\xeb\xac\x7f\x2a\x6b\x8c\x91\xb1\x59\xfc\x16\x93\x2a\xa9\xd1\x5e\xbe\xa1\x48\xc3\x20\x58\x57\x3a\xad\x25\x0c\x87\xb0\x0f\x06\xa9\x7f\x83\xf1\x35\xb4\x88\xe8\x47\xd4\x38\xb3\xa6\xd2\x22\x44\x2c\x00\x56\x6f\x29\x7d\x55\x02\x6a\x95\x29\x9d\x05\x03\x5a\x48\x4b\x3e\xb8\x8a\xe6\xf2\x75\x66\x32\x2c\xc0\xac\x36\x87\xc6\x45\x4b\x2f\xa4\xb5\x7d\xef\xcf\xdd\x3f\x58\x2b\x99\x8b\x5f\xe4\xce\x11\xd1\xef\x7f\xe0\x2e\x92\xef\x19\x25\x61\x04\x1b\x01\x43\x0a\x63\xd9\x21\x18\xd8\xa6\x35\x7f\xc2\x98\x3c\x81\x7b\xd5\xa0\xf3\xeb\x1d\x3c\xba\x27\x5b\xd4\x5a\x1f\x4a\xef\xf6\x18\x09\xf5\xac\xc3\x06\x92\x63\x60\x67\x6e\xce\x2d\xa6\x5c\xb2\x11\x02\xeb\xa0\xf1\x0e\x4f\xc7\xb0\x2c\x65\xaa\xd6\x3b\x40\x42\x28\x54\x6a\xac\x93\x76\xab\x52\x09\x1a\x9d\x82\xc1\x60\x59\x3d\xbb\x9d\xf3\xb2\x40\xce\x6f\x2a\xb5\xa6\xdd\x5f\x11\x29\x92\x0d\x06\xb4\x18\x43\xfd\xc7\x8e\xf3\xa8\x37\xef\x64\x5e\x76\x9b\xf3\xaa\x78\x46\x51\xcd\x1a\x5a\x98\xc3\x45\xaa\xe4\x56\x0a\xc2\x1e\x46\xf0\x2e\x18\x0a\xdb\x69\x32\xe3\x5e\xea\x74\x47\xaa\xb4\xed\x47\x7a\x24\xd8\xf4\x77\x0a\x87\x4e\x86\x93\x24\xa4\x2b\x10\xb5\xd1\x61\x91\xc5\xe8\x54\xc0\x65\x55\x14\xdc\xee\x3e\x09\xd8\x5a\xff\x77\x02\xb6\x49\x1f\xa5\xe4\x4e\xe4\x4c\x8c\xe7\x39\x88\xca\xd6\xdd\xd6\x93\x55\x69\x0a\xe5\xdd\x35\x3a\x91\xb7\x6b\xdc\x89\x10\x17\x66\x37\xbe\x63\x67\xad\x51\x0b\x57\x43\x9b\x47\xe3\xf5\xab\xb2\x12\xb0\x6c\x76\xe7\x37\xd8\xd1\x80\x55\x20\x3d\x2d\xee\x6e\xb9\x05\xb7\x4d\xcf\x0d\xee\x65\x93\x37\x5e\x7d\xdc\xbf\x86\x56\x86\xfd\xa1\x33\xb4\x97\xef\x9b\x12\x22\x97\xaf\xdc\xca\x7d\x73\x0b\x47\x44\x78\x38\x0a\x98\x94\xbe\x10\xb4\x37\xf5\xee\x27\xf3\x07\x65\x77\xd6\x45\xc0\xfe\xb8\x83\x47\xd0\x2f\xc7\x47\x24\x1b\xae\xd1\xe1\x4c\x92\xd4\xa6\xbd\x81\x58\xf7\x1e\xa6\x8a\x77\x17\xeb\x87\x83\x88\xca\x58\xf0\x97\x73\xce\xdd\x6b\x88\xc7\x0c\x09\x27\xb0\x7e\xe2\x1c\xb2\xfd\x94\x11\x06\x03\x43\x4c\xf7\x41\x42\x4b\x5d\x5b\x8a\x21\xba\xab\xa3\x0c\x59\x7c\xc2\xf0\x37\xaa\xfd\x2a\x6d\xca\x1d\xb1\xe1\x28\xba\x98\xd0\xf0\x84\xac\xfb\x66\xa0\x1a\xbd\xbb\xd4\x00\x6c\x38\x24\x17\x1c\x96\xd1\x23\x8e\x3b\x9f\xeb\x90\x71\x21\xec\x35\xe2\x71\x6e\xde\xe2\x57\x5f\x6f\x43\xf6\xb4\x3a\x13\x53\x55\x96\xef\x31\xad\x9e\x16\x33\x56\x53\xad\xda\xde\x90\x36\xc2\xf9\x1b\xb2\xc2\x65\x34\x3b\xef\x92\xe4\x91\x7e\xbf\x96\x1c\x27\x32\xa9\x41\x09\xcf\x70\xbc\x48\x3d\xd1\xa2\x2e\x5f\x48\x19\x2d\x4b\x4a\x69\x1d\xb2\xf1\x77\xee\xbf\x1e\xf9\xf8\xb0\x48\xf0\xcc\x11\x68\x95\xb7\xcf\x00\x7b\xe9\x9f\x00\x00\x00\xff\xff\xf4\xe5\x83\x0d\xb5\x09\x00\x00")

func templatesSrvMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSrvMainTmpl,
		"templates/srv-main.tmpl",
	)
}

func templatesSrvMainTmpl() (*asset, error) {
	bytes, err := templatesSrvMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/srv-main.tmpl", size: 2485, mode: os.FileMode(420), modTime: time.Unix(1460824872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5f\x4f\xdb\x3e\x14\x7d\x8e\x3f\xc5\xfd\xe5\xe1\x27\x1b\x81\xf3\xce\x84\x34\x46\xb3\x09\x09\x15\x04\x95\xf6\x4a\x96\x9a\xe0\xd1\xd8\x99\xe3\xf4\xcf\xaa\x7c\xf7\x5d\x27\x76\x97\x40\x8a\xc4\x2c\x55\xad\xaf\xcf\xfd\x73\xce\xb1\x9b\x24\x70\xf2\x91\x45\x30\xe1\x5b\x3a\x4f\xef\x2f\x17\xe9\x0c\xbe\x5e\xdf\xa4\x70\x76\x06\xb3\x5b\x98\xdf\x2e\x20\x9d\x5d\x2f\xe0\xee\x26\xbd\x7c\x48\x1d\xee\x33\xec\xf7\x60\x65\x29\x6a\x9b\x95\x15\xb4\xad\x0b\xde\x65\x26\x2b\x85\x15\x46\xfe\x16\x4b\xd8\x48\xfb\x7c\x8e\x61\x77\x92\xaa\x65\xa5\xa5\xb2\x73\x3c\x87\x0b\x97\xcb\x47\xa1\x3e\xff\x5e\xfc\x6a\xb0\xe0\x00\x34\x8c\x8c\x30\x8b\x5d\xf5\x0a\xd3\x45\x02\xa6\xae\xb4\xaa\xc5\xa8\xd0\x20\x34\x46\x8d\x4a\x0d\x42\x3d\xea\x63\x0a\x92\x2a\xcb\x5f\xb2\x42\x40\x99\x49\x45\x88\x2c\x2b\x6d\x2c\x50\x12\xc5\x42\xe5\x7a\x29\x55\x91\xfc\xac\xb5\x8a\x31\xa0\x84\x4d\x9e\xad\xad\x62\x82\x9b\x02\xb5\x6a\x7e\xf0\x5c\x97\x49\xa1\xcf\x5e\xa4\x4d\xdc\x47\x78\x89\x1c\xbc\xd0\xab\x4c\x15\x5c\x9b\x22\xd9\x26\x2e\x37\xd7\xca\x8a\x2d\x9e\x31\x32\xd0\x85\x58\x37\xfa\x84\xbe\xfe\x1c\x6a\x6b\x9a\xdc\xc2\x9e\xc0\x84\xc0\x13\x7a\xc2\xa3\x1b\xf8\x3c\x7e\x0b\x8e\x1f\x49\x4b\x86\x42\xbe\xd3\xbb\x07\xbc\x6d\x3e\x32\x65\xca\x82\x71\xfb\x11\x1c\xfb\x47\xa9\x31\x80\x0b\xeb\xa2\xb4\x30\x58\x3e\x4d\x18\x73\xaa\x4b\x69\x45\x59\xd9\xdd\x61\xe0\x30\x1e\xad\x19\x79\x6a\x54\x8e\x6e\xbd\x88\x89\xb9\xff\xe2\xd6\xf9\x14\xaf\x07\x61\xd6\x32\x17\x0c\x82\x51\x07\x00\x52\x8c\x8c\xb0\x8d\x51\xe0\x1a\xd0\xdc\x6e\xc1\x1b\xc6\xaf\xfa\xef\x53\x30\xde\x12\xc4\x0b\xf3\x94\xe5\x62\xdf\x32\xa0\x83\xdd\x29\xe0\xfc\xda\xb0\x4e\x30\x44\xc3\xf9\x45\x48\xe2\xf4\xb8\xc7\x0c\xd1\x75\x3f\xda\x6d\x63\xab\xc6\x76\x75\x5c\x32\xf2\xe0\x57\xd9\x6a\x35\x91\x4b\xb1\x30\x7f\x65\x72\xdb\x32\x12\x45\xf2\xa9\x4b\xff\xef\x02\x94\x5c\x75\xa3\xb8\xe5\xd9\xbd\xe3\xf6\x7e\x62\x08\x9e\x3a\x42\x94\x01\x72\xc3\x6a\x58\xbd\x25\xff\x58\x2d\x8e\x0f\x45\x5a\xef\xeb\x4c\xe0\x1b\x13\x87\xa7\xd0\x59\xbb\xec\x62\xc7\xc5\xa2\x06\x4e\xdc\x33\x0c\xbc\x8f\x3a\xb0\xce\xcc\xc1\xb1\xe3\xe5\x48\x90\x0b\xd5\x76\x57\x90\xcf\xc5\xa6\x1f\xcb\x50\xc3\xbf\xe8\xe5\x8e\xf1\x7e\x4f\xff\xf7\xd5\xd8\xa7\xb1\xbe\x51\xb8\x39\xb8\xed\xfa\x3b\x82\x21\xe6\x73\x7a\xe2\xe1\x36\x7b\xd6\xfe\x15\x76\xb4\xbb\xbf\x1b\x11\x62\x74\x03\x9e\x63\xbf\xff\x6e\xf0\x49\x18\x77\x03\xfd\xc3\x1c\x5d\xc1\x8e\xf2\xe0\x06\x07\x1e\x7d\x23\x43\x37\x8c\xf7\x3f\x69\xc8\x67\x6e\x94\x3f\x01\x00\x00\xff\xff\xe8\xc3\x93\x71\x6f\x06\x00\x00")

func templatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTransportTmpl,
		"templates/transport.tmpl",
	)
}

func templatesTransportTmpl() (*asset, error) {
	bytes, err := templatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/transport.tmpl", size: 1647, mode: os.FileMode(420), modTime: time.Unix(1460304996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Dockerfile.tmpl": templatesDockerfileTmpl,
	"templates/gateway-service.tmpl": templatesGatewayServiceTmpl,
	"templates/instrumentation.tmpl": templatesInstrumentationTmpl,
	"templates/logging.tmpl": templatesLoggingTmpl,
	"templates/service.tmpl": templatesServiceTmpl,
	"templates/srv-main.tmpl": templatesSrvMainTmpl,
	"templates/transport.tmpl": templatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Dockerfile.tmpl": &bintree{templatesDockerfileTmpl, map[string]*bintree{}},
		"gateway-service.tmpl": &bintree{templatesGatewayServiceTmpl, map[string]*bintree{}},
		"instrumentation.tmpl": &bintree{templatesInstrumentationTmpl, map[string]*bintree{}},
		"logging.tmpl": &bintree{templatesLoggingTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
		"srv-main.tmpl": &bintree{templatesSrvMainTmpl, map[string]*bintree{}},
		"transport.tmpl": &bintree{templatesTransportTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

