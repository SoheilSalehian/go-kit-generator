// Code generated by go-bindata.
// sources:
// templates/instrumentation.tmpl
// templates/logging.tmpl
// templates/service.tmpl
// templates/srv-main.tmpl
// templates/transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesInstrumentationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x6e\x9b\x40\x14\x3c\x7b\xbf\xe2\x15\xa9\x12\x54\x09\x56\xaf\x96\x7c\x88\x6a\xd2\x46\x4d\xed\x2a\x76\xdb\x33\x86\x87\xbd\x0a\xec\xd2\xdd\x25\xc8\x45\xfc\x7b\xdf\x2e\xb6\x03\x09\xae\x7a\x48\x24\x82\x3d\x6f\x76\x78\x9e\x19\xa6\x53\xf8\xf0\x36\x7f\x8c\xa4\x3e\x47\xcb\xe8\xe1\x66\x13\x2d\xe0\xf6\xee\x3e\x82\xeb\x6b\x58\xac\x60\xb9\xda\x40\xb4\xb8\xdb\xc0\x0f\x91\xa3\xd6\x90\x54\xda\xc8\x02\xb8\xd0\x46\x55\x05\x0a\x13\x1b\x2e\x05\x70\x0d\x0a\x7f\x57\x5c\x61\x6a\xa5\xbe\xc7\x2a\x2e\xd0\xa0\xe2\x7f\x30\x85\x9a\x9b\xfd\x8c\x60\x3b\x89\x44\x5a\x4a\x2e\xcc\x92\xe6\x30\x87\xa6\x81\x70\x00\xb5\xad\x65\x3d\x90\x16\xea\x3e\xa9\x8f\x0c\x38\x9b\x43\xf9\x82\xe3\x90\x13\x47\x97\x52\x68\x1c\x08\xf5\xa0\x21\x6b\x20\xd5\x83\x3a\xd6\x5b\x39\xcd\xca\x38\x79\x8c\x77\x08\x45\xcc\x05\x63\xbc\x28\xa5\x32\xe0\xb3\x89\x97\x15\xc6\xa3\x9b\xe1\x05\x7a\x8c\x3e\xec\xc8\xb7\x6a\x1b\x26\xb2\x98\xee\xe4\xf5\x23\x37\x53\x7b\x91\xaf\x8a\x27\xda\x63\x01\x63\xc6\xae\xf7\x22\x8b\x6f\x3c\x4d\x73\xac\x63\x85\x60\xf1\xc4\x40\xc3\x26\xaa\xb3\xe6\x93\xac\x84\x01\x80\xa3\x46\xe8\xbe\xa3\x3a\xcf\xef\x63\x83\x22\x39\x9c\xe7\x1b\x5a\xe5\x0b\xa7\xc4\x77\x94\x27\x03\x20\x1b\x6e\xd2\xf4\x52\x09\x1c\xe1\xf4\x6f\x24\xd9\x35\xaa\x27\x9e\x20\x6b\x19\xcb\x2a\x91\x80\x5f\xd4\x97\x97\x0f\xc6\x14\xfc\xd7\x55\x18\x49\x3e\x00\x5f\x56\xa6\xac\xcc\xab\x28\xdb\xf6\x0a\x50\x29\x7b\x49\x15\x58\x63\x52\xcc\x50\x81\x5d\xc7\xdf\xe2\x8e\x0b\xb0\xee\xbb\xdf\x6d\xc7\xce\xa9\xbd\x4c\x6f\x39\xe6\x29\xcc\xe6\x67\x63\x1c\xd0\x7c\xc5\xc3\x0c\xbc\x8e\xe2\x5d\xc1\xcf\x38\xaf\x90\x80\x91\xc5\xbd\x96\x4d\x26\xee\xa9\xff\x94\x22\xc6\xb3\x0e\xd5\x21\x5c\x97\x8a\x44\x32\xdf\x7b\xff\xe4\xb9\xd5\x03\x2b\x54\xd4\x61\x3f\xd0\xf0\x17\x15\xc5\xef\x6d\x1a\x74\xc8\xf3\xf3\x82\x90\x62\xf3\x3f\x06\x83\xb3\xc7\xb0\xff\xe7\xf4\x6a\xab\x29\x3b\xf4\x9d\x39\x6b\x2e\x12\xec\xdc\x0a\x02\xb2\xe8\x5c\x0b\x72\x4f\x3a\x62\x57\x87\x24\xce\x73\x0d\x99\x54\x60\xf6\x78\xa1\x33\xc7\xe3\xa7\xdb\xa4\xed\x1e\xb1\x94\xb5\x4f\xda\x04\x77\x41\x76\xa9\x91\x67\x75\x78\xb9\x57\x63\xa3\x91\xc2\x90\x09\x3c\x73\x7a\xef\xe6\x20\x78\xee\x62\x56\x68\x2a\x25\xc6\x5e\x7d\x68\xba\xce\xd0\x6e\xcc\xbe\x27\x8e\x77\xda\x8a\x8e\xdb\x36\xff\x0d\x00\x00\xff\xff\x20\x60\x9a\x70\x88\x05\x00\x00")

func templatesInstrumentationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInstrumentationTmpl,
		"templates/instrumentation.tmpl",
	)
}

func templatesInstrumentationTmpl() (*asset, error) {
	bytes, err := templatesInstrumentationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/instrumentation.tmpl", size: 1416, mode: os.FileMode(420), modTime: time.Unix(1460129397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoggingTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xc1\x8e\x9b\x30\x10\x3d\xaf\xbf\x62\xea\x93\xa9\x36\xe4\xbe\xd2\x1e\x2a\x85\x56\x2b\xa5\xd9\x2a\x4b\xcf\x15\x81\x09\xb1\x02\x36\x35\xf6\xa2\x36\xe2\xdf\x3b\xb6\x89\x14\x14\x7a\xda\x48\x20\x33\xf3\xf2\xe6\xcd\x9b\xf1\x7a\x0d\x9f\x3f\xf8\x63\xc4\xf1\x2d\xdb\x65\xfb\x2f\x79\xb6\x81\xaf\x2f\xdb\x0c\x56\x2b\xd8\xbc\xc2\xee\x35\x87\x6c\xf3\x92\xc3\x4f\xd5\x60\xdf\xc3\x1e\xfb\x4e\xab\x1e\xc1\xfe\xe9\x10\x64\x0f\x4a\x5b\x50\x85\x95\xef\xe8\x39\x7e\x14\xa6\x68\xd1\xa2\x91\x7f\xb1\x82\x41\xda\xd3\x13\x85\x7d\x26\x53\x55\xa7\xa5\xb2\x3b\xca\xc3\x33\x5c\x2e\x90\xce\x42\xe3\xe8\x51\x7b\xfc\xed\xb0\xbf\x05\xdd\x46\x66\x98\xdc\x0b\x98\x61\x42\xe4\x8a\x89\x32\x67\x44\x37\xa1\x39\x6a\x46\x75\x13\x8a\xa8\x0f\x7b\xcb\xba\xa2\x3c\x17\x35\x42\x5b\x48\xc5\x98\x6c\x3b\x6d\x2c\x08\xf6\xc0\xad\x6c\x91\x33\x3a\xd4\xe4\x94\x3b\xa4\xa5\x6e\xd7\xb5\x5e\x9d\xa5\x5d\xfb\xa7\xd1\x35\x67\x09\x63\xc1\x6b\xfa\xa8\xa5\xaa\xbf\xcb\xaa\x6a\x70\x28\x0c\x42\x6f\x8d\x2b\x2d\x5c\xd8\x83\xcf\xa1\xf1\x90\x74\x1b\x8e\x0c\x96\x1c\x7e\x43\xf3\x2e\x4b\x64\x23\x63\xbe\xb1\x6d\x64\x84\x0a\x4b\xed\xba\x86\x06\x76\x34\xba\x05\x7b\x22\xea\x88\xf4\x8c\xb2\x64\x47\xa7\x4a\x10\xed\x70\xaf\x21\x59\x2a\x23\xee\xe7\xb6\x30\xa6\x04\x84\x76\xb6\x73\x76\xc9\xf7\x47\x40\x63\xfc\xa3\x0d\x95\xa0\x6e\x2a\x3c\x52\x83\x5e\x88\x38\x20\x69\x00\x6f\x5d\x9a\xd3\x2b\xe6\x01\x7e\xd1\x04\xdb\x21\x8d\x56\x78\x1b\x44\x08\x73\x5a\xc7\x93\xae\xf8\x23\xf0\x05\xa9\xfc\x31\x82\xa4\x22\x21\x84\xb9\x57\x1e\x01\xe4\x16\xdd\x84\xec\x89\xd6\xb8\x77\x66\xda\x7e\xbe\x20\xdc\x5f\x89\xce\x50\x81\xe2\xd0\x20\x9c\xd0\x60\x2c\x10\x5b\xa5\x0a\xf1\x30\x95\xa5\x06\x79\x68\x75\xfa\xb6\x5a\x9f\x29\x10\x7a\x7b\x93\xaa\xc4\xd8\x6c\x12\xd3\x09\xbd\x47\x11\x92\x3b\x3d\x88\x84\x36\x03\xae\x7c\xc1\xaf\x60\xc0\xff\xe7\xbe\x94\x12\x0b\x57\xc3\xd7\x91\xc7\xc0\xf8\xe9\x19\x94\x6c\x26\x87\x0d\x5a\x67\xd4\xdd\xb8\xc6\xf1\x32\x7a\x65\x5e\xcd\x04\xb9\x8a\xa2\xff\x86\x65\x63\xff\x02\x00\x00\xff\xff\xa7\xcd\xf2\xc1\xa3\x04\x00\x00")

func templatesLoggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoggingTmpl,
		"templates/logging.tmpl",
	)
}

func templatesLoggingTmpl() (*asset, error) {
	bytes, err := templatesLoggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logging.tmpl", size: 1187, mode: os.FileMode(420), modTime: time.Unix(1460128759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4d\x4f\xe3\x30\x10\x86\xcf\xeb\x5f\x31\xc7\xb6\xda\xb6\xf7\x4a\x7b\x88\x96\x80\x2a\x55\x15\x2a\xbd\x70\x34\xc9\xb4\x35\xa4\x76\xb0\x27\x54\x10\xe5\xbf\x33\xce\x87\xb0\x21\x5c\x9a\x53\xf4\xce\x3b\x1f\xcf\x8c\x97\x4b\x98\x5d\xf7\x09\x4e\xbd\x4f\x76\xfb\x75\xb2\xd9\x3c\xc2\x5d\xba\x4d\x77\xc9\x3e\xbd\x81\xdb\xf5\x26\x85\xf9\x1c\xd2\x5c\x11\xd0\x09\x41\xe9\x5c\x65\x92\x30\x07\x87\x19\x29\xa3\x5d\x9b\x2a\xad\x3c\x23\xa1\x55\x1f\x1c\xb9\x28\x3a\xad\x58\xf6\x91\x54\xe7\xa5\x51\x9a\xb6\x1c\x87\x7f\x50\xd7\xb0\x88\xa4\xa6\xf1\xae\x1d\xbe\x56\xe8\x42\x53\xa8\x44\x9e\xfd\x7b\xf9\xcd\xd3\x2a\x83\xc7\x95\x3c\x12\x46\x85\x02\x29\x76\x45\xa5\x02\xa9\x73\x5d\xb9\xc9\x99\x10\xa5\xcc\x5e\xe4\x11\xe1\x2c\x95\x16\x82\x7c\xc9\x11\xee\x07\xb4\x6f\x2a\xf3\x1b\xe5\xbd\x1d\x24\xff\xd5\xe2\xbf\x2c\x8a\x11\x2b\x4c\x7e\xe2\x4e\x07\x31\x1a\xfc\x2f\xa0\xb5\xc6\x4e\x45\xd3\x37\x76\x7d\x17\x47\xb6\xca\xa8\x6e\x82\x79\xc2\x54\xee\xd1\x39\x78\x08\x0f\x9f\xe4\x39\x0f\xd6\x5e\xfc\xd9\x19\x3d\x04\xb1\xc0\x33\x6a\x72\x1c\x90\xdd\x7b\x18\xea\x5f\x54\x51\x80\x45\xaa\xac\x86\x27\xe6\xf7\xd9\x8a\x8d\xb6\x6f\xb2\xf0\x55\xfd\x9b\xf0\x93\x1d\x2a\x9d\xc1\xa4\x4f\x9d\xc2\x2f\xd4\x13\xa5\xcb\x8a\x46\x2e\x3d\x82\xfe\x45\xee\x01\x4c\x45\x3e\x73\x35\x7a\x5b\xf0\x4b\x88\x11\xfd\xa1\xa0\x30\x47\x95\x81\x39\x84\x58\xdd\x23\x16\xe2\x4f\x4f\xd6\x15\x6e\x5b\x31\xc7\x67\x00\x00\x00\xff\xff\xad\xda\x51\x7c\x6f\x03\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 879, mode: os.FileMode(420), modTime: time.Unix(1460127913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSrvMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\xcd\x6e\xe3\x36\x10\x3e\x8b\x4f\x31\x20\x50\x40\x2e\xbc\xf2\xdd\x40\x0e\x6e\xe3\x26\x41\xbd\x4e\x60\x6b\x51\x14\x8b\x45\xc0\x88\x63\x99\x88\x45\xaa\x24\xe5\xc4\x75\xfd\xee\x1d\xd2\x72\x56\x8a\x9d\x43\x81\x45\x05\x24\xa2\x66\x3e\xce\xcf\x37\x3f\x1e\x8d\xe0\xe7\x1f\xf1\x30\x32\xf4\x30\x59\xe4\x77\x93\xd9\xec\x4f\xb8\x99\xce\xa7\x8b\x49\x3e\xbd\x86\xdf\xee\x66\x53\xf8\xf4\x09\xae\xef\x61\x7e\x9f\xc3\xf4\xfa\x2e\x87\x46\x6f\xd0\x39\x28\x1a\xe7\x4d\x05\x4a\x3b\x6f\x9b\x0a\xb5\x17\x5e\x19\x1d\x0d\x09\x2b\x2a\xf4\x68\xd5\xdf\x28\xe1\x45\xf9\xf5\x98\xc4\x41\x33\xd5\xb2\x36\x4a\xfb\x39\xe9\xe1\x0a\xf6\x7b\xc8\x7a\xa2\xc3\x21\xa0\x16\xf8\x57\x83\xae\x0b\xea\x4a\x7a\x98\x7c\x57\xbf\xc3\x44\xc9\x09\xe3\x6a\xa3\x1d\xf6\x0c\x75\x44\x7d\x54\xcf\x54\x47\x74\x44\xfd\x18\x96\x59\x2d\x8a\x67\x51\x22\x54\x42\x69\xc6\x54\x55\x1b\xeb\x21\x65\x09\xdf\x98\x92\xd3\x4b\xa3\x1f\xad\xbd\xaf\x39\x63\x49\x78\x7b\x2b\xb4\x8b\x20\x5e\x12\x8f\xcd\x53\x56\x98\x6a\x54\x9a\x4f\xcf\xca\x8f\xc2\xdf\x1b\xa0\xbd\x96\xf0\xd2\x6c\x84\x2e\x33\x63\xcb\xd1\xeb\x28\xd8\x2b\x8c\xf6\xf8\xea\x39\x1b\x30\xb6\x6a\x74\x11\x9d\xa7\x03\xd8\xb3\xa4\xf0\xaf\x30\xbe\x82\x16\x91\xfd\x42\xd1\x95\xd6\x34\x5a\xa6\x03\x06\xe0\xb6\x45\xd0\x3a\xb4\x5b\x55\xe0\xfe\xc0\x48\x46\x54\x2c\xd1\x37\x35\x50\xc0\xa5\xd2\x25\x4b\xc2\x01\x6d\x00\xd2\x29\x9b\xe3\xcb\xcc\x94\xab\xca\xcf\xa2\x38\x35\x2e\x5b\x7a\x89\xd6\x0e\x7a\xb7\xdf\x77\x4d\xb2\x52\xb8\x91\xbf\xe3\xce\x05\x43\x5f\xbf\x91\x96\x8c\xef\x39\xb5\xd1\xda\x48\x3e\x04\x4e\x26\x8c\xe5\x07\x96\xd8\x63\x9d\x7f\xa5\x30\x7d\x00\x13\x0b\xb5\x35\x01\x88\x8d\x0b\xfe\xa3\x86\x5c\x3b\x2f\x3b\x8a\x56\x7a\x5f\x7b\xb7\xa7\x48\x42\x03\x38\xaa\x06\x8e\x81\x5f\x68\xc3\x1b\x62\xa1\xe6\x43\x96\x24\xcb\xe6\xc9\xed\x9c\xc7\x8a\x80\x5f\x27\x52\xc2\x67\x55\x58\xd3\x72\x12\xcd\x7c\x8b\xb8\x70\x1a\x43\x7c\x78\x37\xc4\xa8\xbc\xc5\x4d\x7d\x52\xce\x9b\xea\x89\xf8\x32\x2b\x68\x61\x8e\x0e\x85\xc2\x2d\xca\x80\x3d\x0c\xe1\x8d\x0b\xe2\xec\x94\xee\x4c\x78\xd4\xc5\x2e\x24\x4c\x19\x59\x55\xc4\x54\x73\x55\xe1\xad\xa2\x39\x2c\x69\xe2\x52\x4f\x5f\x59\x1b\x1e\x95\x54\x0e\xcf\xb9\x59\x36\x55\x25\xec\xee\x1d\x37\xad\xf4\xff\xe4\xa6\xcd\xa7\x13\xad\x3b\x63\x2a\x37\x5e\x6c\x40\x36\x36\xf6\x48\x8f\x31\xa5\xa1\xea\x5c\xcd\xce\x98\x3b\xb5\x5b\x88\xea\xf2\xa6\xa2\x6f\xea\x87\x15\xa5\xe9\x22\xf4\xf8\xef\x78\xeb\x0f\x65\x11\xa8\x22\x76\xe7\xd7\xd4\x87\x40\x04\x07\xaa\x2c\x69\xb7\xc2\xc6\xc1\xb8\x40\xcc\xf2\x98\x38\x4b\x82\xbe\x3b\x37\xad\xa0\x1d\x99\xcf\x4a\xca\x0d\xbe\x08\x8b\xfb\xe3\xec\x0c\x83\xc1\x43\x27\x60\x72\xf5\x51\xd0\xde\x44\xed\x3b\xf1\x77\x93\x27\x5f\x1f\x02\xf6\xdd\xe6\x1c\x42\xbf\x1c\xdf\x23\x59\x0b\x4d\x17\x2e\x24\x19\x3a\xb0\xb7\x99\x62\x5b\x51\xaa\x34\x71\x54\x3f\xda\x28\xa1\x8c\x95\x78\xbe\x74\xf9\xf4\x99\x92\x9b\x41\xc0\x49\xaa\x9f\xbc\x84\x6c\xb7\x79\xc0\x50\x60\x84\x39\xed\x64\x92\xc4\xda\x86\x18\xb2\xdb\x18\x65\xca\x47\x67\x16\xfe\x21\xb6\x5f\xd0\x16\xc2\x05\x6b\xb4\x40\x3e\x4c\x68\x70\x66\xac\x1d\x30\xba\xd4\x1f\x93\x23\xc0\xa6\x83\x70\xe5\xb1\x2d\x28\xda\x8c\x56\x5d\xca\x2b\x57\x86\x35\x75\x9b\xe7\x0f\xe1\x2d\xa4\xb4\x57\x74\xa0\xfd\x77\x43\x3f\x85\x7a\x9b\xf2\x2f\x8f\x17\xa2\x6c\xea\xfa\x2d\xca\xc7\x2f\x8b\x19\xbf\x68\x9c\x96\x5f\x48\x21\x44\x39\xa3\x71\x47\x3d\xd1\x32\x72\x9e\xd2\xa6\xcd\x96\x35\x2d\x4b\xbf\x4a\xf9\xf8\x27\xf7\x5f\x5d\x3e\xdc\x2f\x72\xf2\x39\x04\xad\x36\xe4\x9a\x6a\xff\x6f\x00\x00\x00\xff\xff\xdb\x08\x1c\x4a\x53\x08\x00\x00")

func templatesSrvMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSrvMainTmpl,
		"templates/srv-main.tmpl",
	)
}

func templatesSrvMainTmpl() (*asset, error) {
	bytes, err := templatesSrvMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/srv-main.tmpl", size: 2131, mode: os.FileMode(420), modTime: time.Unix(1460130326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\x0e\x1f\xa8\x20\x96\xee\x2e\x7c\x48\x6b\xb5\x08\x10\xd8\x41\x62\xa0\xd7\xa8\xf2\x5a\x51\x1d\x91\x2a\x45\xf9\xa7\x86\xde\xbd\x4b\x89\x74\xa5\x44\x0e\x90\x12\x30\x6c\x2e\x67\x97\x3b\x33\x4b\x47\x11\x5c\x7d\x64\x31\x4a\xf8\x16\x2f\xe2\x87\x9b\x55\x3c\x87\xaf\xb7\x77\x31\x4c\x26\x30\x5f\xc2\x62\xb9\x82\x78\x7e\xbb\x82\xfb\xbb\xf8\xe6\x31\x36\xb8\xfb\x44\x25\x05\x6a\x54\xf9\x6f\x5c\xc3\x3e\xd7\xcf\x53\x0a\x9b\x93\x58\xac\x4b\x99\x0b\xbd\xa0\x73\x98\xc1\xe9\x04\xe1\x20\xd4\x34\x06\xf5\x80\xbf\x6a\xac\xfa\xa0\x7e\x64\x80\x59\x1d\xcb\x57\x98\x36\xe2\x30\x55\x29\x45\x85\x83\x42\xbd\xd0\x10\x35\x28\xd5\x0b\x75\xa8\x8f\x89\xc5\xca\x24\xdd\x26\x19\x42\x91\xe4\x82\xb1\xbc\x28\xa5\xd2\xc0\x99\xe7\xa3\x48\xe5\x3a\x17\x59\xf4\xb3\x92\xc2\xa7\x80\x40\x1d\x3d\x6b\x5d\xfa\x8c\x36\x19\x69\x55\xff\x08\x53\x59\x44\x99\x9c\x6c\x73\x1d\x99\x0f\x5a\x89\x0c\x3c\x93\x2f\x89\xc8\x42\xa9\xb2\xe8\x10\x99\xdc\x54\x0a\x8d\x07\x3a\x0b\x58\x4f\x17\xa6\x4d\xeb\x23\xfa\xda\x73\xa8\xb4\xaa\x53\x0d\x27\x06\x23\x02\x8f\xe8\x09\x4f\xa6\xe1\xa9\xff\x16\xec\x3f\xb1\x86\xf5\x85\x7c\xe7\xee\x0e\xf0\xf6\xf2\x81\x29\x63\x16\x0c\xaf\x1f\xc0\xe9\x7e\x2f\x56\x0a\x68\x51\x5d\x92\x16\x7a\xcb\xa6\xa1\x52\xd7\xb2\xc8\x35\x16\xa5\x3e\x9e\x1b\x76\xed\xf1\x2a\x60\x9b\x5a\xa4\xe4\xd6\x16\x47\xfa\xfe\x8b\xdb\xa5\x63\xbc\x1e\x51\xed\xf2\x14\x03\x70\x46\x9d\x01\x44\xd1\x53\xa8\x6b\x25\xc0\x5c\xc0\x53\x7d\x00\x6b\x58\xf8\xa5\xfb\xbe\x06\x65\x2d\x21\x3c\xaa\x4d\x92\xe2\xa9\x09\x80\xf7\x76\xd7\x40\xfd\x4b\x15\xb4\x82\x11\x1a\xa6\x33\x97\x14\xf2\xcb\x1e\x07\x84\xae\xba\xd6\x96\xb5\x2e\x6b\xdd\xd6\x31\xc9\xc4\x23\x1c\xc9\xe3\x54\x34\x7c\x65\x70\xd3\x04\xcc\xf3\xf2\x4d\x9b\xfa\xdf\x0c\x44\xfe\xd2\xb6\x61\x96\x65\xf6\x8e\xd3\xa7\xb1\x06\x88\x0f\x55\xa1\xaa\x0d\xfb\xc7\x2a\xbe\x7f\x2e\xd2\x58\x2f\xe7\x48\xef\x0a\xcf\xe3\xdf\xda\xb9\x6e\x63\x97\x05\xe2\x0a\xae\xcc\xd3\x73\x7c\x2f\xaa\xbe\x4b\xd4\xd9\xa5\xcb\xe5\x98\x93\x89\x14\x36\x63\x17\x2e\x70\xdf\xb5\xa5\xb8\x0a\x3f\xcb\xf5\x31\x08\xbb\x3d\xff\xdf\x56\x0b\x3e\x0d\x75\xf5\xdc\xb4\xd0\xb6\xbd\xdf\x10\x74\x31\x9b\xd3\x11\x77\x13\x6c\x59\xdb\x97\xd7\xd2\x6e\xff\x62\xd0\xc5\xf8\x1e\x2c\xc7\x6e\xff\x5d\xd1\x33\x50\x66\xea\xec\x63\x1c\x8c\x5d\x4b\xb9\x37\xb5\x8e\x47\x77\x91\xe2\xfb\x20\xec\x7e\x72\x97\x1f\x98\x56\xfe\x04\x00\x00\xff\xff\x9a\x86\x5b\x03\x4e\x06\x00\x00")

func templatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTransportTmpl,
		"templates/transport.tmpl",
	)
}

func templatesTransportTmpl() (*asset, error) {
	bytes, err := templatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/transport.tmpl", size: 1614, mode: os.FileMode(420), modTime: time.Unix(1460059369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/instrumentation.tmpl": templatesInstrumentationTmpl,
	"templates/logging.tmpl": templatesLoggingTmpl,
	"templates/service.tmpl": templatesServiceTmpl,
	"templates/srv-main.tmpl": templatesSrvMainTmpl,
	"templates/transport.tmpl": templatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"instrumentation.tmpl": &bintree{templatesInstrumentationTmpl, map[string]*bintree{}},
		"logging.tmpl": &bintree{templatesLoggingTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
		"srv-main.tmpl": &bintree{templatesSrvMainTmpl, map[string]*bintree{}},
		"transport.tmpl": &bintree{templatesTransportTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

