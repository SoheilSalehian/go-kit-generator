// Code generated by go-bindata.
// sources:
// templates/service.tmpl
// templates/transport.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4d\x4f\xe3\x30\x10\x86\xcf\xeb\x5f\x31\xc7\xb6\xda\xb6\xf7\x4a\x7b\x88\x96\x80\x2a\x55\x15\x2a\xbd\x70\x34\xc9\xb4\x35\xa4\x76\xb0\x27\x54\x10\xe5\xbf\x33\xce\x87\xb0\x21\x5c\x9a\x53\xf4\xce\x3b\x1f\xcf\x8c\x97\x4b\x98\x5d\xf7\x09\x4e\xbd\x4f\x76\xfb\x75\xb2\xd9\x3c\xc2\x5d\xba\x4d\x77\xc9\x3e\xbd\x81\xdb\xf5\x26\x85\xf9\x1c\xd2\x5c\x11\xd0\x09\x41\xe9\x5c\x65\x92\x30\x07\x87\x19\x29\xa3\x5d\x9b\x2a\xad\x3c\x23\xa1\x55\x1f\x1c\xb9\x28\x3a\xad\x58\xf6\x91\x54\xe7\xa5\x51\x9a\xb6\x1c\x87\x7f\x50\xd7\xb0\x88\xa4\xa6\xf1\xae\x1d\xbe\x56\xe8\x42\x53\xa8\x44\x9e\xfd\x7b\xf9\xcd\xd3\x2a\x83\xc7\x95\x3c\x12\x46\x85\x02\x29\x76\x45\xa5\x02\xa9\x73\x5d\xb9\xc9\x99\x10\xa5\xcc\x5e\xe4\x11\xe1\x2c\x95\x16\x82\x7c\xc9\x11\xee\x07\xb4\x6f\x2a\xf3\x1b\xe5\xbd\x1d\x24\xff\xd5\xe2\xbf\x2c\x8a\x11\x2b\x4c\x7e\xe2\x4e\x07\x31\x1a\xfc\x2f\xa0\xb5\xc6\x4e\x45\xd3\x37\x76\x7d\x17\x47\xb6\xca\xa8\x6e\x82\x79\xc2\x54\xee\xd1\x39\x78\x08\x0f\x9f\xe4\x39\x0f\xd6\x5e\xfc\xd9\x19\x3d\x04\xb1\xc0\x33\x6a\x72\x1c\x90\xdd\x7b\x18\xea\x5f\x54\x51\x80\x45\xaa\xac\x86\x27\xe6\xf7\xd9\x8a\x8d\xb6\x6f\xb2\xf0\x55\xfd\x9b\xf0\x93\x1d\x2a\x9d\xc1\xa4\x4f\x9d\xc2\x2f\xd4\x13\xa5\xcb\x8a\x46\x2e\x3d\x82\xfe\x45\xee\x01\x4c\x45\x3e\x73\x35\x7a\x5b\xf0\x4b\x88\x11\xfd\xa1\xa0\x30\x47\x95\x81\x39\x84\x58\xdd\x23\x16\xe2\x4f\x4f\xd6\x15\x6e\x5b\x31\xc7\x67\x00\x00\x00\xff\xff\xad\xda\x51\x7c\x6f\x03\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 879, mode: os.FileMode(420), modTime: time.Unix(1460050989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\x0e\x1f\xa8\x20\x96\xee\x2e\x7c\x48\x6b\xb5\x08\x10\xd8\x41\x62\xa0\xd7\xa8\xf2\x5a\x51\x1d\x91\x2a\x45\xf9\xa7\x86\xde\xbd\x4b\x89\x74\xa5\x44\x0e\x90\x12\x30\x6c\x2e\x67\x97\x3b\x33\x4b\x47\x11\x5c\x7d\x64\x31\x4a\xf8\x16\x2f\xe2\x87\x9b\x55\x3c\x87\xaf\xb7\x77\x31\x4c\x26\x30\x5f\xc2\x62\xb9\x82\x78\x7e\xbb\x82\xfb\xbb\xf8\xe6\x31\x36\xb8\xfb\x44\x25\x05\x6a\x54\xf9\x6f\x5c\xc3\x3e\xd7\xcf\x53\x0a\x9b\x93\x58\xac\x4b\x99\x0b\xbd\xa0\x73\x98\xc1\xe9\x04\xe1\x20\xd4\x34\x06\xf5\x80\xbf\x6a\xac\xfa\xa0\x7e\x64\x80\x59\x1d\xcb\x57\x98\x36\xe2\x30\x55\x29\x45\x85\x83\x42\xbd\xd0\x10\x35\x28\xd5\x0b\x75\xa8\x8f\x89\xc5\xca\x24\xdd\x26\x19\x42\x91\xe4\x82\xb1\xbc\x28\xa5\xd2\xc0\x99\xe7\xa3\x48\xe5\x3a\x17\x59\xf4\xb3\x92\xc2\xa7\x80\x40\x1d\x3d\x6b\x5d\xfa\x8c\x36\x19\x69\x55\xff\x08\x53\x59\x44\x99\x9c\x6c\x73\x1d\x99\x0f\x5a\x89\x0c\x3c\x93\x2f\x89\xc8\x42\xa9\xb2\xe8\x10\x99\xdc\x54\x0a\x8d\x07\x3a\x0b\x58\x4f\x17\xa6\x4d\xeb\x23\xfa\xda\x73\xa8\xb4\xaa\x53\x0d\x27\x06\x23\x02\x8f\xe8\x09\x4f\xa6\xe1\xa9\xff\x16\xec\x3f\xb1\x86\xf5\x85\x7c\xe7\xee\x0e\xf0\xf6\xf2\x81\x29\x63\x16\x0c\xaf\x1f\xc0\xe9\x7e\x2f\x56\x0a\x68\x51\x5d\x92\x16\x7a\xcb\xa6\xa1\x52\xd7\xb2\xc8\x35\x16\xa5\x3e\x9e\x1b\x76\xed\xf1\x2a\x60\x9b\x5a\xa4\xe4\xd6\x16\x47\xfa\xfe\x8b\xdb\xa5\x63\xbc\x1e\x51\xed\xf2\x14\x03\x70\x46\x9d\x01\x44\xd1\x53\xa8\x6b\x25\xc0\x5c\xc0\x53\x7d\x00\x6b\x58\xf8\xa5\xfb\xbe\x06\x65\x2d\x21\x3c\xaa\x4d\x92\xe2\xa9\x09\x80\xf7\x76\xd7\x40\xfd\x4b\x15\xb4\x82\x11\x1a\xa6\x33\x97\x14\xf2\xcb\x1e\x07\x84\xae\xba\xd6\x96\xb5\x2e\x6b\xdd\xd6\x31\xc9\xc4\x23\x1c\xc9\xe3\x54\x34\x7c\x65\x70\xd3\x04\xcc\xf3\xf2\x4d\x9b\xfa\xdf\x0c\x44\xfe\xd2\xb6\x61\x96\x65\xf6\x8e\xd3\xa7\xb1\x06\x88\x0f\x55\xa1\xaa\x0d\xfb\xc7\x2a\xbe\x7f\x2e\xd2\x58\x2f\xe7\x48\xef\x0a\xcf\xe3\xdf\xda\xb9\x6e\x63\x97\x05\xe2\x0a\xae\xcc\xd3\x73\x7c\x2f\xaa\xbe\x4b\xd4\xd9\xa5\xcb\xe5\x98\x93\x89\x14\x36\x63\x17\x2e\x70\xdf\xb5\xa5\xb8\x0a\x3f\xcb\xf5\x31\x08\xbb\x3d\xff\xdf\x56\x0b\x3e\x0d\x75\xf5\xdc\xb4\xd0\xb6\xbd\xdf\x10\x74\x31\x9b\xd3\x11\x77\x13\x6c\x59\xdb\x97\xd7\xd2\x6e\xff\x62\xd0\xc5\xf8\x1e\x2c\xc7\x6e\xff\x5d\xd1\x33\x50\x66\xea\xec\x63\x1c\x8c\x5d\x4b\xb9\x37\xb5\x8e\x47\x77\x91\xe2\xfb\x20\xec\x7e\x72\x97\x1f\x98\x56\xfe\x04\x00\x00\xff\xff\x9a\x86\x5b\x03\x4e\x06\x00\x00")

func templatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTransportTmpl,
		"templates/transport.tmpl",
	)
}

func templatesTransportTmpl() (*asset, error) {
	bytes, err := templatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/transport.tmpl", size: 1614, mode: os.FileMode(420), modTime: time.Unix(1460050892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/service.tmpl": templatesServiceTmpl,
	"templates/transport.tmpl": templatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
		"transport.tmpl": &bintree{templatesTransportTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

